<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Hibernate Community Newsletter 07/2018</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/iYJ-xbXwngU/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="newsletter" scheme="searchisko:content:tags" /><author><name>Vlad Mihalcea</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_community_newsletter_07_2018</id><updated>2018-04-10T09:13:56Z</updated><published>2018-04-10T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="articles"&gt;&lt;a class="anchor" href="#articles"&gt;&lt;/a&gt;Articles&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to use Kotlin with Hibernate, then you should check out &lt;a href="http://www.baeldung.com/kotlin-jpa"&gt;this article&lt;/a&gt;. On the same page, there’s also this &lt;a href="https://github.com/roamingthings/kotlin-jpa-workbench"&gt;GitHub repository&lt;/a&gt; that shows you how to use Kotlin, JPA, and Spring Boot.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;CDC (Change Data Capture) is a very useful technique to push database changes as events to other systems. Debezium is an open-source project aiming to simplify this process, and, in &lt;a href="http://debezium.io/blog/2018/03/08/creating-ddd-aggregates-with-debezium-and-kafka-streams/"&gt;this article&lt;/a&gt;, you will how to create DDD aggregates with Debezium and Kafka Streams.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using PostgreSQL, it’s quite common to use a SERIAL column for Primary Keys. However, SERIAL column types have limitations when using JPA and Hibernate. For more details, check out &lt;a href="https://vladmihalcea.com/postgresql-serial-column-hibernate-identity/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There is a great variety of Java connection pool frameworks, so choosing one that fits your application requirements might not be a trivial task. &lt;a href="https://beansroasted.wordpress.com/2017/07/29/connection-pool-analysis/"&gt;This article&lt;/a&gt; shows a very detailed analysis of the most well-known connection pools, so choosing the right framework will be easier after you read it.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Apart from supporting the standard JPA annotation, Hibernate offers many other annotations that allow you to deal with various data access requirements. One such annotation, &lt;code&gt;@Immutable&lt;/code&gt; lets you fetch entities in read-only mode by default. For more details, check out &lt;a href="https://vladmihalcea.com/immutable-entity-jpa-hibernate/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;By default, Apache TomEE ships with OpenJPA. However, you can use any JPA provider you want, and &lt;a href="https://fmdojo.wordpress.com/2018/04/03/hibernate-5-2-spatial-jpa-in-apache-tomee-7/"&gt;this article&lt;/a&gt; shows how to set up TomEE to use Hibernate.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Sam Kruglov wrote a very &lt;a href="https://samkruglov.wordpress.com/2018/01/07/json-filtering-with-spring/"&gt;interesting article&lt;/a&gt; about filtering RESTful JSON views with Spring and JPA.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you are starting learning Java EE, &lt;a href="https://www.halfastack.com/java-ee-jpa-introduction-i/"&gt;this article&lt;/a&gt; is a very good introduction to Java Persistence API.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you are using Criteria API and want to know how to order results, then check out &lt;a href="https://www.thoughts-on-java.org/hibernate-tips-order-by-clause-criteriaquery/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="time-to-upgrade"&gt;&lt;a class="anchor" href="#time-to-upgrade"&gt;&lt;/a&gt;Time to upgrade&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There were two Hibernate project releases since the last newsletter:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/03/29/hibernate-ogm-5-3-1-Final-released/"&gt;Hibernate OGM 5.3.1.Final is out&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/03/27/hibernate-validator-609-final-out/"&gt;Hibernate Validator 6.0.9.Final is released&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="questions-and-answers"&gt;&lt;a class="anchor" href="#questions-and-answers"&gt;&lt;/a&gt;Questions and answers&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/43467484/hibernate-caching-and-lazy-loaded-associations/49487615#49487615"&gt;Hibernate Caching and lazy loaded associations&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/retrieving-a-few-records-at-one-time-from-database-with-jpa/432"&gt;Retrieving a few records at one time from the database with JPA&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/30019731/hibernate-jpql-throws-update-delete-queries-cannot-be-typed/30019803#30019803"&gt;Hibernate JPQL throws Update/delete queries cannot be typed&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/entity-loader-does-not-take-into-consideration-a-subsequent-lock-request/467"&gt;Entity Loader does not take into consideration a subsequent lock request &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/do-i-need-hibernate-cfg-xml-if-i-use-jpa/468"&gt;Do I need the &lt;code&gt;hibernate.cfg.xml&lt;/code&gt; if I use JPA?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/avoiding-unnecessary-join-with-many-to-many-relation/465"&gt;Avoiding unnecessary Join with Many-to-many relation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/27804069/hibernate-mapping-between-postgresql-enum-and-java-enum/46303099#46303099"&gt;Hibernate mapping between PostgreSQL enum and Java enum&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/30288464/when-should-i-use-joincolumn-or-jointable/30292348#30292348"&gt;When should I use &lt;code&gt;@JoinColumn&lt;/code&gt; or &lt;code&gt;@JoinTable&lt;/code&gt;?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/28363625/exclude-entity-field-when-doing-update-with-jpa/28363801#28363801"&gt;How to exclude an entity field when doing an update with JPA&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/97197/what-is-n1-select-query-issue/39696775#39696775"&gt;What is the N+1 SELECT query issue?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/1590422/immutable-vs-entitymutable-false-in-hibernate/49651679#49651679"&gt;&lt;code&gt;@Immutable&lt;/code&gt; vs &lt;code&gt;@Entity(mutable=false)&lt;/code&gt; in Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/where-annotation-does-no-refresh-after-updating-the-child-collection/503"&gt;&lt;code&gt;@Where&lt;/code&gt; annotation does no refresh after updating the child collection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/33496956/postgresql-stored-procedure-and-hibernate"&gt;PostgreSQL Stored Procedure and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/28253838/can-i-use-hibernate-for-jta/28260359#28260359"&gt;Can I use Hibernate for JTA?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/iYJ-xbXwngU" height="1" width="1" alt=""/&gt;</content><summary>Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users. Articles If you want to use Kotlin with Hibernate, then you should check out this article. On the same page, there’s also this GitHub repository that shows you how to use Kotlin, JPA, and Spring Boot. CDC (Change Data Capture) is a very useful te...</summary><dc:creator>Vlad Mihalcea</dc:creator><dc:date>2018-04-10T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/04/10/hibernate-community-newsletter-2018-07/</feedburner:origLink></entry><entry><title>Accessing Data – The Reactive Way</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ilmh64d6DhY/" /><category term="Database" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="future" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JDBC" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="reactive" scheme="searchisko:content:tags" /><category term="vert.x" scheme="searchisko:content:tags" /><author><name>unknown</name></author><id>searchisko:content:id:jbossorg_blog-accessing_data_the_reactive_way</id><updated>2018-04-09T18:03:58Z</updated><published>2018-04-09T18:03:58Z</published><content type="html">&lt;p&gt;This is the fourth post of my &amp;#8220;&lt;em&gt;Introduction to &lt;a href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt;&lt;/em&gt;.&amp;#8221; series. In this article, we are going to see how we can use JDBC in an Eclipse Vert.x application using the asynchronous API provided by the &lt;a href="http://vertx.io/docs/vertx-jdbc-client/java/"&gt;vertx-jdbc-client&lt;/a&gt;. But before diving into JDBC and other SQL subtleties, we are going to talk about Vert.x &lt;code&gt;Futures&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;In &amp;#8220;The Introduction to Vert.x&amp;#8221; Series&lt;/h2&gt; &lt;p&gt;Let’s start by refreshing our memory about the previous articles:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The &lt;a href="https://developers.redhat.com/blog/2018/03/13/eclipse-vertx-first-application/"&gt;first post&lt;/a&gt; described how to build a vert.x application with Maven and execute unit tests.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://developers.redhat.com/blog/2018/03/22/eclipse-vert-x-application-configuration"&gt;second post&lt;/a&gt; reviewed how this application became configurable.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://developers.redhat.com/blog/2018/03/29/rest-vert-x"&gt;third post&lt;/a&gt; introduced vertx-web, and a collection management application was developed. This application exposes a REST API used by an HTML/JavaScript frontend.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;span id="more-478367"&gt;&lt;/span&gt;In this fourth post we will fix the major flaw of our application: the in-memory back-end. The current application uses an in-memory &lt;code&gt;Map&lt;/code&gt; to store the products (articles). This is very useful as we lose the content every time we restart the application. Let&amp;#8217;s use a database. In this post, we are going to use PostgreSQL, but you can use any database providing a JDBC driver. For instance, our tests are going to use HSQL. Interactions with the database are asynchronous and made using the &lt;code&gt;vertx-jdbc-client&lt;/code&gt;. But before diving into these JDBC and SQL details, let&amp;#8217;s introduce the Vert.x &lt;code&gt;Future&lt;/code&gt; class and explain how it&amp;#8217;s going to make asynchronous coordination much simpler.&lt;/p&gt; &lt;p&gt;The code of this post is available on the &lt;a href="https://github.com/redhat-developer/introduction-to-eclipse-vertx"&gt;Github repo&lt;/a&gt;, in the &lt;code&gt;post-4&lt;/code&gt; directory.&lt;/p&gt; &lt;h2&gt;Asynchronous API&lt;/h2&gt; &lt;p&gt;One of the Eclipse Vert.x characteristics is its asynchronous and non-blocking nature. With an asynchronous API, you don’t wait for a result, but you are notified when this result is ready, the operation has completed&amp;#8230; Just to illustrate this, let’s take a very simple example.&lt;/p&gt; &lt;p&gt;Let’s imagine a &lt;code&gt;retrieve&lt;/code&gt; method. Traditionally, you would use it like this: &lt;code&gt;String r = retrieve()&lt;/code&gt;. This is a synchronous API as the execution continue when for the result has been returned by the &lt;code&gt;retrieve&lt;/code&gt; method. An asynchronous version of this API would be: &lt;code&gt;retrieve(r -&amp;#62; { /* do something with the result */ })&lt;/code&gt;. In this version, you pass a function (&lt;code&gt;Handler&lt;/code&gt; in the Vert.x lingo) called when the result has been computed. This function does not return anything and is called when the result has been computed. For instance, the &lt;code&gt;retrieve&lt;/code&gt; method code could be something like:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; public void retrieve(Handler&amp;#60;String&amp;#62; resultHandler) { fileSystem.read(fileName, res -&amp;#62; { resultHandler.handle(res); }); } &lt;/pre&gt; &lt;p&gt;Just to avoid misconceptions, asynchronous APIs are not about threads. As we can see in the &lt;code&gt;retrieve&lt;/code&gt; example, there are no threads involved and most Vert.x applications are using a very small number of threads while being asynchronous and non-blocking. Also, it&amp;#8217;s important to notice that the method is non-blocking. The &lt;code&gt;retrieve&lt;/code&gt; method may return before the &lt;code&gt;resultHandler&lt;/code&gt; is called.&lt;/p&gt; &lt;p&gt;Asynchronous operations can also &amp;#8230; fail. So, we need a way to encapsulate these failures and forward them to the callback. We can&amp;#8217;t use &lt;code&gt;try-catch&lt;/code&gt; blocks because of the asynchrony. To capture the result or the failure or an operation, Vert.x proposes the &lt;code&gt;AsyncResult&lt;/code&gt; type. Our &lt;code&gt;Handler&lt;/code&gt; does not receive the plain result anymore but an &lt;code&gt;AsyncResult&lt;/code&gt; encapsulating the result in case of success or the error if something bad happens:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; public void retrieve( Handler&amp;#60;AsyncResult&amp;#60;String&amp;#62;&amp;#62; resultHandler) { vertx.fileSystem().readFile(&amp;#34;fileName&amp;#34;, ar -&amp;#62; { if (ar.failed()) { resultHandler.handle( Future.succeededFuture(ar.result().toString())); } else { resultHandler.handle( Future.failedFuture(ar.cause())); } }); } &lt;/pre&gt; &lt;p&gt;Look at the &lt;code&gt;if-else&lt;/code&gt; block. You will see it a lot when using &lt;code&gt;AsyncResult&lt;/code&gt;. I won&amp;#8217;t detail &lt;code&gt;Future&lt;/code&gt; here, it&amp;#8217;s covered a bit later, just be patient. For now, &lt;code&gt;Future.succeededFuture&lt;/code&gt; and &lt;code&gt;Future.failedFuture&lt;/code&gt; are just factory methods creating &lt;code&gt;AsyncResult&lt;/code&gt; instances. On the consumer side, you would do:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; retrieve(ar -&amp;#62; { if (ar.failed()) { // Handle the failure, the exception is // retrieved using ar.cause() Throwable cause = ar.cause(); // ... } else { // Made it, the result is in ar.result() String content = ar.result(); // ... } }); &lt;/pre&gt; &lt;p&gt;So, to summarize, an asynchronous method is a method forwarding its result or failure as a notification, generally calling a callback expecting the result.&lt;/p&gt; &lt;h2&gt;The Asynchronous Coordination Dilemma&lt;/h2&gt; &lt;p&gt;Once you have a set of asynchronous methods, you generally want to orchestrate them:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Sequentially, so calling once another one has completed.&lt;/li&gt; &lt;li&gt;Concurrently, so calling several actions at the same time and being notified when all/one of them have completed.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For the first case, we would do something like:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; retrieve(ar -&amp;#62; { if (ar.failed()) { // do something to recover } else { String r = ar.result(); // call another async method anotherAsyncMethod(r, ar2 -&amp;#62; { if (ar2.failed()) { //... } else { // ... } }) } }); &lt;/pre&gt; &lt;p&gt;You can quickly spot the issue&amp;#8230; things start getting messy. Nested callbacks reduce code readability, and this was with just two. Imagine dealing with more than that, as we will see later in this post.&lt;/p&gt; &lt;p&gt;For the second type of composition, you can also imagine the difficulty. In each result handler, you need to check whether or not the others have completed or failed and then react accordingly. This leads to convoluted code.&lt;/p&gt; &lt;h2&gt;Future and CompositeFuture (Async Coordination Made Easy)&lt;/h2&gt; &lt;p&gt;To reduce the code complexity, Vert.x proposes a class named &lt;code&gt;Future&lt;/code&gt;. A &lt;code&gt;Future&lt;/code&gt; is an object that encapsulates a result of an action that may, or may not, have occurred yet. Unlike regular Java Future, Vert.x &lt;code&gt;Future&lt;/code&gt; is non-blocking and a &lt;code&gt;Handler&lt;/code&gt; is called when the &lt;code&gt;Future&lt;/code&gt; is completed or &lt;code&gt;failed&lt;/code&gt;. The &lt;code&gt;Future&lt;/code&gt; class implements &lt;code&gt;AsyncResult&lt;/code&gt; as it represents a result computed asynchronously.&lt;/p&gt; &lt;p&gt;&lt;em&gt;A note about Java Future:&lt;/em&gt; Regular Java &lt;code&gt;Future&lt;/code&gt; is blocking. Calling &lt;code&gt;get&lt;/code&gt; blocks the caller thread until the result is received (or a timeout is reached). Vert.x &lt;code&gt;Futures&lt;/code&gt; also have a &lt;code&gt;get&lt;/code&gt; method returning &lt;code&gt;null&lt;/code&gt; if the result is not yet received. They also expect a handler to be attached to them, calling it when the result is received.&lt;/p&gt; &lt;p&gt;Creating a &lt;code&gt;Future&lt;/code&gt; object is done using the &lt;code&gt;Future.future()&lt;/code&gt; factory method:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; Future&amp;#60;Integer&amp;#62; future = Future.future(); future.complete(1); // Completes the Future with a result future.fail(exception); // Fails the Future // To be notified when the future has been completed // or failed future.setHandler(ar -&amp;#62; { // Handler called with the result or the failure, // ar is an AsyncResult }); &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s revisit our &lt;code&gt;retrieve&lt;/code&gt; method. Instead of taking a callback as a parameter, we can return a &lt;code&gt;Future&lt;/code&gt; object:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; public Future&amp;#60;String&amp;#62; retrieve() { Future&amp;#60;String&amp;#62; future = Future.future(); vertx.fileSystem().readFile(&amp;#34;fileName&amp;#34;, ar -&amp;#62; { if (ar.failed()) { future.failed(ar.cause()); } else { future.complete(ar.result().toString()); } }); return future; } &lt;/pre&gt; &lt;p&gt;As mentioned above, it&amp;#8217;s important to understand that this &lt;code&gt;retrieve&lt;/code&gt; method returns its &lt;code&gt;Future&lt;/code&gt; probably before it receives a value. So, the &lt;code&gt;return future;&lt;/code&gt; statement is executed before it executes &lt;code&gt;future.handle(...)&lt;/code&gt;. Vert.x seasoned developers would have written this code a bit differently:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; public Future&amp;#60;String&amp;#62; retrieve() { Future&amp;#60;String&amp;#62; future = Future.future(); vertx.fileSystem().readFile(&amp;#34;fileName&amp;#34;, ar -&amp;#62; future.handle(ar.map(Buffer::toString))); return future; } &lt;/pre&gt; &lt;p&gt;We are going to cover this API in a few minutes. but first, let&amp;#8217;s look at the caller side, things do not change much. The handler is attached on the returned &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; retrieve().setHandler(ar -&amp;#62; { if (ar.failed()) { // Handle the failure, the exception is // retrieved using ar.cause() Throwable cause = ar.cause(); // ... } else { // Made it, the result is in ar.result() int r = ar.result(); // ... } }); &lt;/pre&gt; &lt;p&gt;Where things become much easier is when you need to compose asynchronous action. Sequential composition is handled using the &lt;code&gt;compose&lt;/code&gt; method:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; retrieve() .compose(this::anotherAsyncMethod) .setHandler(ar -&amp;#62; { // ar.result is the final result // if any stage fails, ar.cause is // the thrown exception }); &lt;/pre&gt; &lt;p&gt;&lt;code&gt;Future.compose&lt;/code&gt; takes as a parameter a function consuming the result of the previous &lt;code&gt;Future&lt;/code&gt; and returning another &lt;code&gt;Future&lt;/code&gt;. This way you can chain many asynchronous actions.&lt;/p&gt; &lt;p&gt;What about concurrent composition. Let&amp;#8217;s imagine you want to invoke 2 unrelated operations and be notified when both have completed:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; Future&amp;#60;String&amp;#62; future1 = retrieve(); Future&amp;#60;Integer&amp;#62; future2 = anotherAsyncMethod(); CompositeFuture.all(future1, future2) .setHandler(ar -&amp;#62; { // called when either all future have completed // successfully (success), // or one failed (failure) }); &lt;/pre&gt; &lt;p&gt;&lt;code&gt;CompositeFuture&lt;/code&gt; is a companion class simplifying the drastically concurrent composition. &lt;code&gt;all&lt;/code&gt; is not the only operator provided, you can use &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;&amp;#8230;&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;Future&lt;/code&gt; and &lt;code&gt;CompositeFuture&lt;/code&gt; make the code much more readable and maintainable. Vert.x also supports RX Java to manage asynchronous composition, this will be covered in another post.&lt;/p&gt; &lt;h2&gt;JDBC Yes, but Asynchronous&lt;/h2&gt; &lt;p&gt;So, now that we have seen some basics about asynchronous APIs and &lt;code&gt;Future&lt;/code&gt;s, let’s have a look to the &lt;code&gt;vertx-jdbc-client&lt;/code&gt;. This Vert.x module lets us interact with a database through a JDBC driver. These interactions are asynchronous, so when you were doing:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; String sql = &amp;#34;SELECT * FROM Products&amp;#34;; ResultSet rs = stmt.executeQuery(sql); &lt;/pre&gt; &lt;p&gt;When you use the &lt;code&gt;vertx-jdbc-client&lt;/code&gt;, it becomes:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; connection.query(&amp;#34;SELECT * FROM Products&amp;#34;, result -&amp;#62; { // do something with the result }); &lt;/pre&gt; &lt;p&gt;This model avoids waiting for the result. You are notified when the result has been retrieved from the database.&lt;/p&gt; &lt;p&gt;&lt;em&gt;A Note on JDBC&lt;/em&gt;: JDBC is a blocking API by default. To interact with the database, Vert.x delegates to a &lt;em&gt;worker&lt;/em&gt; thread. While it&amp;#8217;s asynchronous, it&amp;#8217;s not totally non-blocking. However, the Vert.x ecosystem also provides truly non-blocking clients for MySQL and PostgreSQL.&lt;/p&gt; &lt;p&gt;Let’s now modify our application to use a database to store our products (articles).&lt;/p&gt; &lt;h2&gt;Some Maven Dependencies&lt;/h2&gt; &lt;p&gt;The first things we need to do it to declare two new Maven dependencies in our &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt; &lt;pre class="brush: xml; title: ; notranslate"&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.vertx&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;vertx-jdbc-client&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${vertx.version}&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.postgresql&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;postgresql&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;9.4.1212&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;The first dependency provides the &lt;code&gt;vertx-jdbc-client&lt;/code&gt;, while the second one provides the PostgreSQL JDBC driver. If you want to use another database, change this dependency. You will also need to change the JDBC URL and JDBC driver class name in the code.&lt;/p&gt; &lt;h2&gt;Initializing the JDBC Client&lt;/h2&gt; &lt;p&gt;Now that we have added these dependencies, it’s time to create our JDBC client. But it needs to be configured. Edit the &lt;code&gt;src/main/conf/my-application-conf.json&lt;/code&gt; to match the following content:&lt;/p&gt; &lt;pre class="brush: jscript; title: ; notranslate"&gt; { &amp;#34;HTTP_PORT&amp;#34;: 8082, &amp;#34;url&amp;#34;: &amp;#34;jdbc:postgresql://localhost:5432/my_read_list&amp;#34;, &amp;#34;driver_class&amp;#34;: &amp;#34;org.postgresql.Driver&amp;#34;, &amp;#34;user&amp;#34;: &amp;#34;user&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;password&amp;#34; } &lt;/pre&gt; &lt;p&gt;We add the &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;driver_class&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; entries. Notice that if you use a different database, the configuration will likely be different.&lt;/p&gt; &lt;p&gt;Now that the configuration is written, we need to create an instance of JDBC client. In the &lt;code&gt;MyFirstVerticle&lt;/code&gt; class, declare a new field &lt;code&gt;JDBCClient jdbc;&lt;/code&gt;, and update the end of the &lt;code&gt;start&lt;/code&gt; method to become:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; ConfigRetriever retriever = ConfigRetriever.create(vertx); retriever.getConfig( config -&amp;#62; { if (config.failed()) { fut.fail(config.cause()); } else { // Create the JDBC client jdbc = JDBCClient.createShared(vertx, config.result(), &amp;#34;My-Reading-List&amp;#34;); vertx .createHttpServer() .requestHandler(router::accept) .listen( // Retrieve the port from the configuration, // default to 8080. config.result().getInteger(&amp;#34;HTTP_PORT&amp;#34;, 8080), result -&amp;#62; { if (result.succeeded()) { fut.complete(); } else { fut.fail(result.cause()); } }); } } ); &lt;/pre&gt; &lt;p&gt;Ok, we have the &lt;em&gt;client&lt;/em&gt; configured with our configuration, we need a connection to the database. This is achieved using the &lt;code&gt;jdbc.getConnection&lt;/code&gt; method that provides its result (the connection) to a &lt;code&gt;Handler&amp;#60;AsyncResult&amp;#62;&lt;/code&gt;. This handler is notified when the connection with the database is established or if something bad happens during the process. While we could use the method directly, let&amp;#8217;s extract the retrieval of a connection to a separate method and returns a &lt;code&gt;Future&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future&amp;#60;SQLConnection&amp;#62; connect() { Future&amp;#60;SQLConnection&amp;#62; future = Future.future(); // 1 jdbc.getConnection(ar -&amp;#62; // 2 future.handle(ar.map(connection -&amp;#62; // 3 connection.setOptions( new SQLOptions().setAutoGeneratedKeys(true)) // 4 ) ) ); return future; // 5 } &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s have a deeper look to this method. First we create a &lt;code&gt;Future&lt;/code&gt; object (1) that we return at the end of the method (5). This &lt;code&gt;Future&lt;/code&gt; will be completed or failed depending wether or not we successfully retrieve a connection to the database. This is done in (2). The function we passed to &lt;code&gt;getConnection&lt;/code&gt; receives an &lt;code&gt;AsyncResult&lt;/code&gt;. &lt;code&gt;Future&lt;/code&gt; have a method (&lt;code&gt;handle&lt;/code&gt;) to directly completes or fails based on an &lt;code&gt;AsyncResult&lt;/code&gt;. To &lt;code&gt;handle&lt;/code&gt; is equivalent to:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; if (ar.failed()) { future.failed(ar.cause()); } else { future.complete(ar.result()); } &lt;/pre&gt; &lt;p&gt;just&amp;#8230; shorter.&lt;/p&gt; &lt;p&gt;However, before passing the &lt;code&gt;AsyncResult&lt;/code&gt; to &lt;code&gt;future&lt;/code&gt;, we want to configure the connection to enable the key generation. For this, we use the &lt;code&gt;AsyncResult.map&lt;/code&gt; method. This method creates another instance of &lt;code&gt;AsyncResult&lt;/code&gt; based on the given one and applies a mapper function on the result. If the given one encapsulates a failure, the created one encapsulate the same failure. If the input is a success, the mapper function is applied on the result.&lt;/p&gt; &lt;h2&gt;We Need Articles&lt;/h2&gt; &lt;p&gt;Now that we have a JDBC client, and a way to retrieve a connection to the database it&amp;#8217;s time to insert articles. But because we use a relational database, we first need to create the table. Create the following method:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future&amp;#60;SQLConnection&amp;#62; createTableIfNeeded(SQLConnection connection) { Future&amp;#60;SQLConnection&amp;#62; future = Future.future(); vertx.fileSystem().readFile(&amp;#34;tables.sql&amp;#34;, ar -&amp;#62; { if (ar.failed()) { future.fail(ar.cause()); } else { connection.execute(ar.result().toString(), ar2 -&amp;#62; future.handle(ar2.map(connection)) ); } }); return future; } &lt;/pre&gt; &lt;p&gt;The method also returns a &lt;code&gt;Future&lt;/code&gt;. Attentive readers would spot that this is typically a method we can use in a &lt;code&gt;Future.compose&lt;/code&gt; construct. This method body is quite simple. As usual, we create a &lt;code&gt;Future&lt;/code&gt; and returns it at the end of the body. Then, we read the content of the &lt;code&gt;tables.sql&lt;/code&gt; file and execute the unique statement contained in this file. The &lt;code&gt;execute&lt;/code&gt; method takes the SQL statement as a parameter and invokes the given function with the result. In the handler, we complete or fail the future using the &lt;code&gt;handle&lt;/code&gt; method. In this case, we want to complete the future with the database connection.&lt;/p&gt; &lt;p&gt;So, we need the &lt;code&gt;tables.sql&lt;/code&gt; file. Creates the &lt;code&gt;src/main/resources/tables.sql&lt;/code&gt; file with the following content:&lt;/p&gt; &lt;pre class="brush: sql; title: ; notranslate"&gt; CREATE TABLE IF NOT EXISTS Articles (id SERIAL PRIMARY KEY, title VARCHAR(200) NOT NULL, url VARCHAR(200) NOT NULL) &lt;/pre&gt; &lt;p&gt;Ok, so now we have a connection to the database, and the table. Let&amp;#8217;s insert articles, but only if the database is empty. For this, create the &lt;code&gt;createSomeDataIfNone&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; methods:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future&amp;#60;SQLConnection&amp;#62; createSomeDataIfNone(SQLConnection connection) { Future&amp;#60;SQLConnection&amp;#62; future = Future.future(); connection.query(&amp;#34;SELECT * FROM Articles&amp;#34;, select -&amp;#62; { if (select.failed()) { future.fail(select.cause()); } else { if (select.result().getResults().isEmpty()) { Article article1 = new Article(&amp;#34;Fallacies of distributed computing&amp;#34;, &amp;#34;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&amp;#34;); Article article2 = new Article(&amp;#34;Reactive Manifesto&amp;#34;, &amp;#34;https://www.reactivemanifesto.org/&amp;#34;); Future &amp;#60;Article&amp;#62; insertion1 = insert(connection, article1, false); Future &amp;#60;Article&amp;#62; insertion2 = insert(connection, article2, false); CompositeFuture.all(insertion1, insertion2) .setHandler(r -&amp;#62; future.handle(r.map(connection))); } else { // Boring... nothing to do. future.complete(connection); } } }); return future; } private Future &amp;#60;Article&amp;#62; insert(SQLConnection connection, Article article, boolean closeConnection) { Future &amp;#60;Article&amp;#62; future = Future.future(); String sql = &amp;#34;INSERT INTO Articles (title, url) VALUES (?, ?)&amp;#34;; connection.updateWithParams(sql, new JsonArray().add(article.getTitle()).add(article.getUrl()), ar -&amp;#62; { if (closeConnection) { connection.close(); } future.handle( ar.map(res -&amp;#62; new Article(res.getKeys().getLong(0), article.getTitle(), article.getUrl())) ); } ); return future; } &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s start by the end and the &lt;code&gt;insert&lt;/code&gt; method. It follows the same pattern and uses the &lt;code&gt;updateWithParams&lt;/code&gt; method to insert an article into the database. The SQL statement contains parameters injected using a JSON Array. Notice that the order of the parameter matters. When the insertion is done (in the handler), we close the connection if requested (&lt;code&gt;closeConnection&lt;/code&gt; parameter) &amp;#8211; this is because we are going to reuse method later. Finally, we complete or fail the &lt;code&gt;future&lt;/code&gt; with, on success, a new &lt;code&gt;Article&lt;/code&gt; containing the generated id. So, if the insertion failed, we just forward the failure to the future. If the insertion succeeds, we map it to an &lt;code&gt;Article&lt;/code&gt; and complete the future with this value.&lt;/p&gt; &lt;p&gt;Ok, let&amp;#8217;s switch to the &lt;code&gt;createSomeDataIfNone&lt;/code&gt; method. Again same pattern. But here we need a bit of coordination. Indeed, we need to check whether the database is empty first and if so insert two articles. To check if the database is empty, we use &lt;code&gt;connection.query&lt;/code&gt; retrieving all the articles. If the result is not empty, we create two articles that we insert using the &lt;code&gt;insert&lt;/code&gt; method. To execute these two insertions, we use the &lt;code&gt;CompositeFuture&lt;/code&gt; construct. So both actions are executed in concurrently, and when both are done (or one fails) the handler is called. Notice that the connection is not closed.&lt;/p&gt; &lt;h2&gt;Putting These Pieces Together&lt;/h2&gt; &lt;p&gt;It&amp;#8217;s time to assemble these pieces and see how it works. The &lt;code&gt;start&lt;/code&gt; method needs to be updated to execute the following action:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Retrieve the configuration (already done).&lt;/li&gt; &lt;li&gt;When the configuration is retrieved, create the JDBC client (already done).&lt;/li&gt; &lt;li&gt;Retrieve a connection to the database.&lt;/li&gt; &lt;li&gt;With this connection, create the table if they do not exist.&lt;/li&gt; &lt;li&gt;With the same connection, check whether the database contains articles, if not, insert some data.&lt;/li&gt; &lt;li&gt;Close the connection.&lt;/li&gt; &lt;li&gt;Start the HTTP server as we are ready to &lt;em&gt;serve.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Report the success or failure of the boot process to &lt;code&gt;fut&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Wow&amp;#8230; that&amp;#8217;s a lot of actions. Fortunately, we have implemented almost all the required method in a way we can use &lt;code&gt;Future&lt;/code&gt; composition. In the &lt;code&gt;start&lt;/code&gt; method, replace the end of the code with:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; // Start sequence: // 1 - Retrieve the configuration // |- 2 - Create the JDBC client // |- 3 - Connect to the database (retrieve a connection) // |- 4 - Create table if needed // |- 5 - Add some data if needed // |- 6 - Close connection when done // |- 7 - Start HTTP server // |- 8 - we are done! ConfigRetriever.getConfigAsFuture(retriever) .compose(config -&amp;#62; { jdbc = JDBCClient.createShared(vertx, config, &amp;#34;My-Reading-List&amp;#34;); return connect() .compose(connection -&amp;#62; { Future&amp;#60;Void&amp;#62; future = Future.future(); createTableIfNeeded(connection) .compose(this::createSomeDataIfNone) .setHandler(x -&amp;#62; { connection.close(); future.handle(x.mapEmpty()); }); return future; }) .compose(v -&amp;#62; createHttpServer(config, router)); }).setHandler(fut); &lt;/pre&gt; &lt;p&gt;Don&amp;#8217;t worry about the &lt;code&gt;createHttpServer&lt;/code&gt; method. We will cover it shortly. The code starts by retrieving the configuration and creates the &lt;code&gt;JDBCClient&lt;/code&gt;. Then, we retrieve a database connection and initialize our database. Notice that the connection is close in all cases (even failures). When the database is set up, we start the HTTP server. Finally, when everything is done, we report the result (success or failure) to the &lt;code&gt;fut&lt;/code&gt; telling to Vert.x whether or not we are ready to work.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note about closing connections&lt;/em&gt;: Don’t forget to close the SQL connection when you are done. The connection will be given back to the connection pool and be recycled.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;createHTTPServer&lt;/code&gt; method is quite simple and follows the same pattern:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future&amp;#60;Void&amp;#62; createHttpServer(JsonObject config, Router router) { Future&amp;#60;Void&amp;#62; future = Future.future(); vertx .createHttpServer() .requestHandler(router::accept) .listen( config.getInteger(&amp;#34;HTTP_PORT&amp;#34;, 8080), res -&amp;#62; future.handle(res.mapEmpty()) ); return future; } &lt;/pre&gt; &lt;p&gt;Notice the &lt;code&gt;mapEmpty&lt;/code&gt;. The method returns a &lt;code&gt;Future&lt;/code&gt;, as we don&amp;#8217;t care of the HTTP Server. To create an &lt;code&gt;AsyncResult&lt;/code&gt; from an &lt;code&gt;AsyncResult&lt;/code&gt; use the &lt;code&gt;mapEmpty&lt;/code&gt; method, discarding the encapsulated result.&lt;/p&gt; &lt;h2&gt;Implementing the REST API On Top of JDBC&lt;/h2&gt; &lt;p&gt;So, at this point, we have everything setup, but our API is still relying on our in-memory back-end. It&amp;#8217;s time to re-implement our REST API on top of JDBC. But first, we need some utility methods focusing on the interaction with the database. These methods have been extracted to ease the understanding.&lt;/p&gt; &lt;p&gt;First, let&amp;#8217;s add the &lt;code&gt;query&lt;/code&gt; method:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future&amp;#60;List &amp;#60;Article&amp;#62;&amp;#62; query(SQLConnection connection) { Future&amp;#60;List &amp;#60;Article&amp;#62;&amp;#62; future = Future.future(); connection.query(&amp;#34;SELECT * FROM articles&amp;#34;, result -&amp;#62; { connection.close(); future.handle( result.map(rs -&amp;#62; rs.getRows().stream() .map(Article::new) .collect(Collectors.toList())) ); } ); return future; } &lt;/pre&gt; &lt;p&gt;This method uses again the same pattern: it creates a &lt;code&gt;Future&lt;/code&gt; object and returns it. The future is completed or failed when the underlying action completes or fails. Here the action is a database query. The method executes the query and upon success, for each &lt;em&gt;row&lt;/em&gt; creates a new &lt;code&gt;Article&lt;/code&gt;. Also, notice that we close the connection regardless the success or failure of the query. It&amp;#8217;s important to release the connection, so it can be recycled.&lt;/p&gt; &lt;p&gt;In the same vein, let&amp;#8217;s implement &lt;code&gt;queryOne&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future &amp;#60;Article&amp;#62; queryOne(SQLConnection connection, String id) { Future &amp;#60;Article&amp;#62; future = Future.future(); String sql = &amp;#34;SELECT * FROM articles WHERE id = ?&amp;#34;; connection.queryWithParams(sql, new JsonArray().add(Integer.valueOf(id)), result -&amp;#62; { connection.close(); future.handle( result.map(rs -&amp;#62; { List&amp;#60;JsonObject&amp;#62; rows = rs.getRows(); if (rows.size() == 0) { throw new NoSuchElementException( &amp;#34;No article with id &amp;#34; + id); } else { JsonObject row = rows.get(0); return new Article(row); } }) ); }); return future; } &lt;/pre&gt; &lt;p&gt;This method uses &lt;code&gt;queryWithParams&lt;/code&gt; to inject the article id in the query. In the result handler, there is a bit more work as we need to check if the article has been found. If not, we throw a &lt;code&gt;NoSuchElementException&lt;/code&gt; that would fail the &lt;code&gt;future&lt;/code&gt;. This lets us generate &lt;code&gt;404&lt;/code&gt; responses.&lt;/p&gt; &lt;p&gt;We have done queries, we need methods to update and delete. Here they are:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Future&amp;#60;Void&amp;#62; update(SQLConnection connection, String id, Article article) { Future&amp;#60;Void&amp;#62; future = Future.future(); String sql = &amp;#34;UPDATE articles SET title = ?, url = ? WHERE id = ?&amp;#34;; connection.updateWithParams(sql, new JsonArray().add(article.getTitle()) .add(article.getUrl()) .add(Integer.valueOf(id) ), ar -&amp;#62; { connection.close(); if (ar.failed()) { future.fail(ar.cause()); } else { UpdateResult ur = ar.result(); if (ur.getUpdated() == 0) { future.fail(new NoSuchElementException( &amp;#34;No article with id &amp;#34; + id)); } else { future.complete(); } } }); return future; } private Future&amp;#60;Void&amp;#62; delete(SQLConnection connection, String id) { Future&amp;#60;a&amp;#62; future = Future.future(); String sql = &amp;#34;DELETE FROM Articles WHERE id = ?&amp;#34;; connection.updateWithParams(sql, new JsonArray().add(Integer.valueOf(id)), ar -&amp;#62; { connection.close(); if (ar.failed()) { future.fail(ar.cause()); } else { if (ar.result().getUpdated() == 0) { future.fail( new NoSuchElementException( &amp;#34;No article with id &amp;#34; + id)); } else { future.complete(); } } }); return future; } &lt;/pre&gt; &lt;p&gt;They are very similar and follow the same pattern (again!).&lt;/p&gt; &lt;p&gt;That&amp;#8217;s great but it does not implement our REST API. So, let&amp;#8217;s focus on this now. Just to refresh our mind, here are the methods we need to update:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;getAll&lt;/code&gt; returns all the articles.&lt;/li&gt; &lt;li&gt;&lt;code&gt;addOne&lt;/code&gt; inserts a new article. Article details are given in the request body.&lt;/li&gt; &lt;li&gt;&lt;code&gt;deleteOne&lt;/code&gt; deletes a specific article. The id is given as a &lt;em&gt;path parameter&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;getOne&lt;/code&gt; provides the JSON representation of a specific article. The id is given as a &lt;em&gt;path parameter&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;updateOne&lt;/code&gt; updates a specific article. The id is given as a &lt;em&gt;path parameter&lt;/em&gt;. The new details are in the request body.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Because we have extracted the database interactions in their own method, implementing this method is straightforward. For instance, the &lt;code&gt;getAll&lt;/code&gt; method is:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private void getAll(RoutingContext rc) { connect() .compose(this::query) .setHandler(ok(rc)); } &lt;/pre&gt; &lt;p&gt;We retrieve a connection using the &lt;code&gt;connect&lt;/code&gt; method. Then we compose (sequential composition) this with the &lt;code&gt;query&lt;/code&gt; method, and we attach a handler. This handler is &lt;code&gt;ok(rc)&lt;/code&gt; which is provided in the &lt;code&gt;ActionHelper&lt;/code&gt; class. It basically provides the JSON representation or manages the error responses (&lt;code&gt;500&lt;/code&gt;, &lt;code&gt;404&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Following the same pattern, the other methods are implemented as follows:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private void addOne(RoutingContext rc) { Article article = rc.getBodyAsJson().mapTo(Article.class); connect() .compose(connection -&amp;#62; insert(connection, article, true)) .setHandler(created(rc)); } private void deleteOne(RoutingContext rc) { String id = rc.pathParam(&amp;#34;id&amp;#34;); connect() .compose(connection -&amp;#62; delete(connection, id)) .setHandler(noContent(rc)); } private void getOne(RoutingContext rc) { String id = rc.pathParam(&amp;#34;id&amp;#34;); connect() .compose(connection -&amp;#62; queryOne(connection, id)) .setHandler(ok(rc)); } private void updateOne(RoutingContext rc) { String id = rc.request().getParam(&amp;#34;id&amp;#34;); Article article = rc.getBodyAsJson().mapTo(Article.class); connect() .compose(connection -&amp;#62; update(connection, id, article)) .setHandler(noContent(rc)); } &lt;/pre&gt; &lt;h2&gt;Test, Test, and Test Again&lt;/h2&gt; &lt;p&gt;If we run the application tests right now, it fails. First, we need to update the configuration to pass the JDBC URL and related details. But wait&amp;#8230; we also need a database. We don&amp;#8217;t necessarily want to use PostgreSQL in our unit test. Let&amp;#8217;s use HSQL, an in-memory database. To do that we first need to add the following dependency in the &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: xml; title: ; notranslate"&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.hsqldb&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;hsqldb&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.4.0&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;But wait, if you already use JDBC or database in general, you know that each database uses a different dialect (that&amp;#8217;s the power of standards). Here, we can&amp;#8217;t use the same table creation statement because HSQL does not understand the PostgreSQL dialect. So create the &lt;code&gt;src/test/resources/tables.sql&lt;/code&gt; with the following content:&lt;/p&gt; &lt;pre class="brush: sql; title: ; notranslate"&gt; CREATE TABLE IF NOT EXISTS Articles (id INTEGER IDENTITY, title VARCHAR(200), url VARCHAR(200)) &lt;/pre&gt; &lt;p&gt;It&amp;#8217;s the equivalent statement in the HSQL dialect. How would that work? When Vert.x reads a file it also checks the &lt;em&gt;classpath&lt;/em&gt; (and &lt;code&gt;src/test/resources&lt;/code&gt; is included in the &lt;em&gt;test classpath&lt;/em&gt;). When running test, this file superseds the initial file we created.&lt;/p&gt; &lt;p&gt;We need to slightly update our tests to configure the &lt;code&gt;JDBCClient&lt;/code&gt;. In the &lt;code&gt;MyFirstVerticleTest&lt;/code&gt; class, change the &lt;code&gt;DeploymentOption&lt;/code&gt; object created in the &lt;code&gt;setUp&lt;/code&gt; method to be:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; DeploymentOptions options = new DeploymentOptions() .setConfig(new JsonObject() .put(&amp;#34;HTTP_PORT&amp;#34;, port) .put(&amp;#34;url&amp;#34;, &amp;#34;jdbc:hsqldb:mem:test?shutdown=true&amp;#34;) .put(&amp;#34;driver_class&amp;#34;, &amp;#34;org.hsqldb.jdbcDriver&amp;#34;) ); &lt;/pre&gt; &lt;p&gt;In addition to the &lt;code&gt;HTTP_PORT&lt;/code&gt;, we also put the JDBC url and the class of the JDBC driver.&lt;/p&gt; &lt;p&gt;Now, you should be able to run the test with: &lt;code&gt;mvn clean test&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Showtime&lt;/h2&gt; &lt;p&gt;This time we want to use a PostgreSQL instance. I&amp;#8217;m going to use docker but use your favorite approach. With docker, I start my instance as follows:&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; docker run --name some-postgres -e POSTGRES_USER=user \ -e POSTGRES_PASSWORD=password \ -e POSTGRES_DB=my_read_list \ -p 5432:5432 -d postgres &lt;/pre&gt; &lt;p&gt;Let’s now run our application:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; mvn compile vertx:run &lt;/pre&gt; &lt;p&gt;Open your browser to &lt;a href="http://localhost:8082/assets/index.html"&gt;http://localhost:8082/assets/index.html&lt;/a&gt;, and you&lt;br /&gt; should see the application using the database. This time the products are stored in a database persisted on the file system. So, if we stop and restart the application, the data is restored.&lt;/p&gt; &lt;p&gt;If you want to package the application, run &lt;code&gt;mvn clean package&lt;/code&gt;. Then run the application using:&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; java -jar target/my-first-app-1.0-SNAPSHOT.jar \ -conf src/main/conf/my-application-conf.json &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This fourth post in our series has covered two topics. First, we have introduced asynchronous composition and how &lt;code&gt;Future&lt;/code&gt; helps to manage sequential and concurrent composition. With &lt;code&gt;Future&lt;/code&gt;, you follow a common pattern in your implementation, which is quite straightforward once you get it. Secondly, we have seen how JDBC can be used to implement our API. Because we use &lt;code&gt;Future&lt;/code&gt;, using asynchronous JDBC is quite simple.&lt;/p&gt; &lt;p&gt;You may have been surprised by the asynchronous development model, but once you start using it, it’s hard to come back. Asynchronous and event-driven architecture represents how the world around us works. Embracing these give you superpowers.&lt;/p&gt; &lt;p&gt;In the next post, we will see how RX Java 2 can be used instead of Future. Don’t forget that the code is available in this &lt;a href="https://github.com/redhat-developer/introduction-to-eclipse-vertx"&gt;Github repository.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Stay tuned, and happy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;linkname=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Faccessing-data-reactive-way%2F&amp;#38;title=Accessing%20Data%20%E2%80%93%20The%20Reactive%20Way" data-a2a-url="https://developers.redhat.com/blog/2018/04/09/accessing-data-reactive-way/" data-a2a-title="Accessing Data – The Reactive Way"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/09/accessing-data-reactive-way/"&gt;Accessing Data &amp;#8211; The Reactive Way&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ilmh64d6DhY" height="1" width="1" alt=""/&gt;</content><summary>This is the fourth post of my “Introduction to Eclipse Vert.x.” series. In this article, we are going to see how we can use JDBC in an Eclipse Vert.x application using the asynchronous API provided by the vertx-jdbc-client. But before diving into JDBC and other SQL subtleties, we are going to talk about Vert.x Futures. In “The Introduction to Vert.x” Series Let’s start by refreshing our memory abo...</summary><dc:creator>unknown</dc:creator><dc:date>2018-04-09T18:03:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/09/accessing-data-reactive-way/</feedburner:origLink></entry><entry><title>Byteman 4.0.2 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UJloShibKas/byteman-402-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_2_has_been_released</id><updated>2018-04-09T15:53:00Z</updated><published>2018-04-09T15:53:00Z</published><content type="html">&lt;div class="post-body entry-content" id="post-body-3028514058787793602" itemprop="description articleBody"&gt;Byteman 4.0.2 is now available from the &lt;a class="moz-txt-link-freetext" href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a class="moz-txt-link-freetext" href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;/div&gt;&lt;div class="post-body entry-content" id="post-body-3028514058787793602" itemprop="description articleBody"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="post-body entry-content" id="post-body-3028514058787793602" itemprop="description articleBody"&gt;Byteman 4.0.2 updates the 4.0.1 release with a small number of bug fixes and performance improvements. More details can be found in the &lt;a href="http://downloads.jboss.org/byteman/4.0.2/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UJloShibKas" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.2 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.2 updates the 4.0.1 release with a small number of bug fixes and performance improvements. More details can be found in the Release Notes.</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2018-04-09T15:53:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2018/04/byteman-402-has-been-released.html</feedburner:origLink></entry><entry><title>A Cloud Lab Environment in a Backpack</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ie8KI-jS-w0/" /><category term="ansible" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="nuc shell" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="OpenShift Enterprise by Red Hat" scheme="searchisko:content:tags" /><category term="OpenStack" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Marcelo Guimarães</name></author><id>searchisko:content:id:jbossorg_blog-a_cloud_lab_environment_in_a_backpack</id><updated>2018-04-09T10:55:53Z</updated><published>2018-04-09T10:55:53Z</published><content type="html">&lt;p&gt;Have you ever thought about having your own cloud environment? A local cloud is one of the best things you can do to better understand all the gears that run inside a highly productive environment. How do I know that? I&amp;#8217;ve done it! And I&amp;#8217;m ready to show you how I did, and how you can do it too.&lt;/p&gt; &lt;p&gt;&lt;span id="more-475497"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Beep, beep! The alarm just sounded. It’s 4 a.m. and I can’t even feel my thoughts. I&amp;#8217;ve got to leave without making noise. Luckily the airport is not so far from home.&lt;/p&gt; &lt;p&gt;I’m often traveling around the country showing a lot of stuff about DevOps, focusing on the &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;. It’s great work, but it has its risks. Since I don’t know exactly what the environment is where I will have to present, I’m constantly surrounded by many challenges: networks full of policies and proxies, buildings without reliable mobile Internet access, mobile quota exceeded, poor hotel Internet access; the list keeps growing. Having a lot of resources on the cloud can’t solve my problem if I can’t connect to the cloud. This is prone to disaster.&lt;/p&gt; &lt;p&gt;I can’t depend on cloud providers. I had to be my own cloud provider.&lt;/p&gt; &lt;p&gt;I have a great friend who happens to be a digital nomad like me. He is one of the best companions ever. There was a day we were browsing the Internet looking for a “Raspberry on steroids”. After finding a lot of tiny and powerful devices, he spotted our winner: the &lt;a href="https://www.intel.com/content/www/us/en/nuc/nuc-kit-nuc6i7kyk-features-configurations.html"&gt;Intel Nuc Skull Canyon&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I told him: “One day I’ll have one of these. Imagine how great it will be to arrive at a customer’s site showing off this cute piece of hardware.”&lt;/p&gt; &lt;p&gt;This wasn’t the first time Claudio found a great piece of hardware. I’ve been using a &lt;a href="http://gl-inet.com/"&gt;GL.iNet&lt;/a&gt; router recommended by him (the GL-AR300M model). But the Nuc was Claudio’s biggest discovery. It instantly became the highest priority item on my buying list. After months of saving, I was finally able to buy a Nuc with an astonishing 32GB of RAM, plus 1TB of SSD. The next step was supposed to be simple: running Red Hat OpenShift on it.&lt;/p&gt; &lt;p&gt;In the beginning, I was using the classic &lt;code class="highlighter-rouge"&gt;oc cluster up&lt;/code&gt;. It spawns an unstoppable beast that runs really smooth on such hardware. It was fast, but not fun. Especially because metrics and logging didn’t work. Some issues in the deployer pods prevented them from succeeding. I ended up writing a &lt;a href="https://www.redhat.com/en/technologies/management/ansible"&gt;Red Hat Ansible Automation&lt;/a&gt; playbook to fix those issues using the &lt;code class="highlighter-rouge"&gt;oc debug&lt;/code&gt; command. It was functional, but definitely not fun.&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform"&gt;Red Hat OpenStack Platform&lt;/a&gt; sounded like a lot of fun to me, however installing it through Red Hat OpenStack Director on the Nuc wasn’t a feasible task. So, I went with the easy-peasy &lt;a href="https://wiki.openstack.org/wiki/Packstack"&gt;Packstack&lt;/a&gt; (please, don’t kill me).&lt;/p&gt; &lt;p&gt;Well… not so easy for a developer like me, who had near zero experience with network stuff.&lt;/p&gt; &lt;p&gt;After a lot of trial and error, I finally managed to configure Red Hat OpenStack Platform. Since shit happens, I wrote a playbook to bring it up with a lab project containing all the stuff I needed to play with it. Then I made the whole thing available on &lt;a href="https://github.com/devnull-tools/pack-your-lab/tree/master/openstack"&gt;GitHub&lt;/a&gt;. “The fun has begun.”&lt;/p&gt; &lt;p&gt;Ok! I had a way to install Red Hat OpenStack Platform, but how about installing Red Hat Enterprise Linux? Some web pages later I found the Anaconda’s Kickstart. It’s a way of automating the RHEL installation (and any other Linux distribution installed through Anaconda). Even better, RHEL writes a kickstart file after every installation. Then you just have to copy and paste the file to a drive named OEMDRV. Two flash drives (one with the RHEL image and the other with the Kickstart file) would trigger the automated install. But I didn’t want to use flash drives, I had two unused Android devices. Even more fun.&lt;/p&gt; &lt;p&gt;I’ve been using Android devices since 2010; my first one was a Motorola Quench running Android 1.5 (Cupcake). When I rooted it and saw the endless possibilities, my mind opened and I became fascinated by using Android devices for everything.&lt;/p&gt; &lt;p&gt;I started to search for a way to use an Android device as a flash drive, which led me to the awesome &lt;a href="https://play.google.com/store/apps/details?id=com.softwarebakery.drivedroid"&gt;DriveDroid;&lt;/a&gt; it’s an app that emulates both flash drives and CD-ROM drives. I took my phones and loaded one with the RHEL image, the other with the Kickstart image, then I plugged both into the rear USB ports. I didn’t care about the battery because they were old phones.&lt;/p&gt; &lt;p&gt;So I thought: “Now I have two phones; just for installing RHEL? Why don’t I use them for something else?” Two Android devices can make a difference in the setup. I installed the fantastic &lt;a href="https://play.google.com/store/apps/details?id=com.icecoldapps.serversultimatepro"&gt;Servers Ultimate&lt;/a&gt; on both phones to reduce the workload on the Nuc. Smb sharing on both phones allowed me to upload any new image I wanted to install; which led me to put in an HTTP server to serve installation files for my Docker images. A git server would do the rest of the trick by holding my inventory files for my open-sourced Red Hat Ansible Automation playbooks.&lt;/p&gt; &lt;p&gt;To finish up, I plugged the router into the USB-C port. The router takes some time to boot up (more time than the Nuc). This causes a network issue with the Nuc because the Red Hat OpenStack Platform needs Network Manager disabled, so the network needs to be available before the Nuc boots up. By attaching the router on the USB-C port, it can be powered without the Nuc itself being on. Then I’ve attached all cables and left the Nuc to be ready just by plugging in the power supply. Hook and loop fasteners completed the design, holding the Android devices and the router on top of the Nuc. Then it’s easy to put the package in a little handbag, which I need to open every time I go to the airport because its image on the x-ray is similar to a bomb! I’ve discovered this in the worst possible way.&lt;/p&gt; &lt;p&gt;Installing RHEL with the Red Hat OpenStack Platform (plus a fully working project) was only a matter of seven steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Run DriveDroid on both phones.&lt;/li&gt; &lt;li&gt;Turn on the Nuc.&lt;/li&gt; &lt;li&gt;Wait until a push notification arrives at my main phone.&lt;/li&gt; &lt;li&gt;Shutoff DriveDroid.&lt;/li&gt; &lt;li&gt;Turn on the Nuc again.&lt;/li&gt; &lt;li&gt;Run the Red Hat Ansible Automation playbook to install Red Hat OpenStack Platform.&lt;/li&gt; &lt;li&gt;Wait until the second push notification arrives.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;My Kickstart script turns off the Nuc after writing my ssh public key into the authorization keys and sending a notification through &lt;a href="https://pushover.net/"&gt;Pushover&lt;/a&gt;. I’ve been using Pushover for some time; it’s a straightforward way to get notified. That second push notification means a lot to me; it tells me my cloud environment is ready.&lt;/p&gt; &lt;figure id="attachment_475517" style="max-width: 640px" class="wp-caption aligncenter"&gt;&lt;img class="wp-image-475517 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/03/nuc-1024x310.png" alt="My Portable Cloud" width="640" height="194" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/03/nuc-1024x310.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/nuc-300x91.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/nuc-768x232.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;figcaption class="wp-caption-text"&gt;My Portable Cloud&lt;/figcaption&gt;&lt;/figure&gt; &lt;p&gt;I finally managed to be my own cloud provider. With a lot of fun, and not a single drop of rum!&lt;/p&gt; &lt;p&gt;The next step, installing Red Hat OpenShift, wasn’t easy. After a lot of issues while running the playbook, I found the problem. The router (the GL-AR300M) is a great router, but it’s not a router for receiving the traffic of a PaaS. So I decided to create an internal DNS as an OpenStack instance.&lt;/p&gt; &lt;p&gt;From my laptop, I was using the external IP addresses. However, internally the instances will be talking with each other using only internal IP addresses instead of the external ones. A classic mistake for a developer like me.&lt;/p&gt; &lt;p&gt;With everything settled, I ran the playbook again… and got another error. Red Hat OpenShift wasn’t being able to talk with Red Hat OpenStack Platform in order to create volumes in Cinder to attach them to the nodes running pods. The problem was solved upstream; a single line telling Red Hat OpenShift to use the version &lt;code class="highlighter-rouge"&gt;v2&lt;/code&gt; of the Red Hat OpenStack Block Storage API. So I wrote a little workaround to apply the fix to OCP 3.7, and wrapped up everything in a playbook and pushed to &lt;a href="https://github.com/devnull-tools/pack-your-lab/tree/master/openshift"&gt;GitHub&lt;/a&gt;. With OCP 3.9 applying the fix from the upstream, I don’t need my custom fix anymore, just the regular playbooks.&lt;/p&gt; &lt;p&gt;The playbook can create all the instances with the Docker Storage mapped to a Cinder volume, all prereqs done and the Red Hat Ansible inventory file created, neat! With a single step, I was able to bring up a Red Hat OpenShift cluster. I ran it a lot of times on a weekend just to see things going on. That was “gigafun”!&lt;/p&gt; &lt;p&gt;With the cloud environment done, it was just a matter of installing the tools for my presentations. But the environment was so great that I’ve decided to bring my own working environment to it. My presentations became real case scenarios!&lt;/p&gt; &lt;p&gt;I don’t like to put labels on developers: backend, frontend, full stack…, it sounds like different types of heavy metal music. It’s all about coding, but one can have more expertise in some areas.&lt;/p&gt; &lt;p&gt;I love coding and I try to learn many programming languages. They’re tools. If you have the right tool for the job, you can get the job done with pleasure (and fun). That’s why I also love to code tools to get better at getting my job done. So, my work environment is quite easy to reproduce: a &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt; instance and a &lt;a href="https://www.sonatype.com/nexus-repository-sonatype"&gt;Nexus&lt;/a&gt; Repository. But that doesn’t mean I don’t have a value stream to deliver my tools.&lt;/p&gt; &lt;p&gt;I was abducted by the GitLab Runner. It’s fantastic! My &lt;a href="https://gogs.io/"&gt;Gogs&lt;/a&gt; instance went down and I never looked back. Don’t get me wrong, Gogs is a wonderful project, but the GitLab Runner provided me the best tool to get my job done (aka fun).&lt;/p&gt; &lt;p&gt;The runner is a connection between your code and your value stream (the pipeline). Every step on the pipeline runs inside a container created by the runner on top of Red Hat OpenShift. I created a set of build images to not only compile my code but also to release it. Pushover tells me everything about my pipeline. Everything now happens in a wonderful and powerful integration that helps me to engage people.&lt;/p&gt; &lt;p&gt;There are tons of ways to do something, but the way you show how it’s done is what engages people. It’s how magic is done!&lt;/p&gt; &lt;p&gt;A good card trick is straightforward. It doesn’t matter how you ask people to pick a card, or how nicely you shuffle the deck. In the end, it’s all about how you reveal the card. If you do it right, it will be unforgettable.&lt;/p&gt; &lt;p&gt;I love card tricks! You can easily engage an audience with a good trick and that’s how I do my presentations nowadays. They don’t expect me to come up with a little device and throw up an entire environment ready to rock. It’s my best trick! The fun-o-meter blew off!&lt;/p&gt; &lt;p&gt;Oh! My cab is almost here, I should probably finish my coffee. I have a presentation to do… and the best environment is now at my side.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;linkname=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F09%2Fcloud-lab-environment%2F&amp;#38;title=A%20Cloud%20Lab%20Environment%20in%20a%20Backpack" data-a2a-url="https://developers.redhat.com/blog/2018/04/09/cloud-lab-environment/" data-a2a-title="A Cloud Lab Environment in a Backpack"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/09/cloud-lab-environment/"&gt;A Cloud Lab Environment in a Backpack&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ie8KI-jS-w0" height="1" width="1" alt=""/&gt;</content><summary>Have you ever thought about having your own cloud environment? A local cloud is one of the best things you can do to better understand all the gears that run inside a highly productive environment. How do I know that? I’ve done it! And I’m ready to show you how I did, and how you can do it too. Beep, beep! The alarm just sounded. It’s 4 a.m. and I can’t even feel my thoughts. I’ve got to leave wit...</summary><dc:creator>Marcelo Guimarães</dc:creator><dc:date>2018-04-09T10:55:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/09/cloud-lab-environment/</feedburner:origLink></entry><entry><title>Red Hat Summit 2018: Develop Secure Apps and Services</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/iWwJ9y5Z3MQ/" /><category term="3scale" scheme="searchisko:content:tags" /><category term="API-Management" scheme="searchisko:content:tags" /><category term="Developer Events" scheme="searchisko:content:tags" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="red hat single sign-on" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><category term="Red Hat Summit 2018" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2018_develop_secure_apps_and_services</id><updated>2018-04-06T15:55:23Z</updated><published>2018-04-06T15:55:23Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt; will focus on modern application development. A critical part of modern application development is of course securing your applications and services. Things were challenging when you only needed to secure a single monolithic application. In a modern application landscape, you&amp;#8217;re probably looking at building microservices and possibly exposing application services and APIs outside the boundaries of your enterprise. In order to deploy cloud-native applications and microservices you must be able to secure them. You might be faced with the challenge of securing both applications and back-end services accessed by mobile devices while using third party identity providers like social networks. Fortunately,&lt;strong&gt; Red Hat Summit 2018 has a number of developer-oriented sessions where you can learn how to secure your applications and services, integrate single-sign on, and manage your APIs.&lt;/strong&gt; Session highlights include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154677"&gt;I&amp;#8217;m a developer. What do I need to know about security?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154463"&gt;Securing apps and services with Red Hat Single Sign-On&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163840"&gt;Securing service mesh, microservices, and modern applications with JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154928"&gt;Red Hat API management: Overview, security models, and roadmap&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153589"&gt;Best practices for securing the container life cycle&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153698"&gt;Distributed API management in a hybrid cloud environment&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154730"&gt;DevSecOps with disconnected Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153594"&gt;OpenShift + Single sign-on = Happy security teams and happy users&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163864"&gt;Shift security left—and right—in the container life cycle&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-480697"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Red Hat Summit 2018 security sessions for developers&lt;/h2&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154677"&gt;I&amp;#8217;m a developer. What do I need to know about security?&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers&lt;/strong&gt;: &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366432"&gt;Gordon Haff&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=364919"&gt;Jennifer Krieger&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;As DevOps breaks down traditional silos, fewer and fewer things are exclusively “someone else’s problem.” Everyone should have some knowledge of good security practices, to give just one example.  In this interactive session, we’ll delve into security topics like common problem areas, shifting security left, automation, and more. We&amp;#8217;ll answer questions like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How can you make containers secure?&lt;/li&gt; &lt;li&gt;What is the low hanging fruit and what are good things to start with?&lt;/li&gt; &lt;li&gt;How can people who aren’t traditional security professionals engage with those who are?&lt;/li&gt; &lt;li&gt;How will new open source projects like &lt;a href="https://developers.redhat.com/blog/tag/istio/"&gt;Istio&lt;/a&gt; change things?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Bring your questions to learn from Red Hat experts and from each other.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154463"&gt;Securing apps and services with Red Hat Single Sign-On&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366649"&gt;Stian Thorgersen&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366650"&gt;Sébastien Blanc&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;If you have a number of applications and services, the applications may be HTML5, server-side, or mobile, while the services may be monolithic or microservices, deployed on-premise or to the cloud. You may have started looking at using a service mesh. Now, you need to easily secure all these applications and services.&lt;/p&gt; &lt;p&gt;Securing applications and services is no longer just about assigning a username and password. You need to manage identities. You need two-factor authentication. You need to integrate with legacy and external authentication systems. Your list of other requirements may be long. But you don’t want to develop all of this yourself—nor should you.&lt;/p&gt; &lt;p&gt;In this session, we’ll demonstrate how to easily secure all your applications and services—regardless of how they&amp;#8217;re implemented and hosted—with Red Hat single sign-on. After this session, you&amp;#8217;ll know how to secure your HTML5 application or service, deployed to a service mesh and everything in between. Once your applications and services are secured with Red Hat single sign-on, you&amp;#8217;ll know how to easily adopt single sign-on, two-factor authentication, social login, and other security capabilities.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163840"&gt;Securing service mesh, microservices, and modern applications with JSON Web Token (JWT)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366649"&gt;Stian Thorgersen&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366650"&gt;Sébastien Blanc&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;Sharing identity and authorization information between applications and services should be done with an open industry standard to ensure interoperability in heterogeneous environments. Javascript Object Signing and Encryption (JOSE) is a framework for securely sharing such information between heterogeneous applications and services.&lt;/p&gt; &lt;p&gt;In this session, we’ll cover the specifications of the JOSE framework, focusing especially on JSON Web Token (JWT). We’ll discuss practical applications of the JOSE framework, including relevant specifications, such as OpenID Connect. After this session, you’ll have an understanding of the specifications and how to easily adopt them using Red Hat single sign-on or another OpenID Connect provider.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154928"&gt;Red Hat API management: Overview, security models, and roadmap&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366154"&gt;Nicolas Masse&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366985"&gt;Mark Cheshire&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;In this session, you&amp;#8217;ll learn a framework to evaluate different API security models—including API keys, mutual SSL certificates, and OpenID Connect—and how to choose the right one for your architecture needs. We&amp;#8217;ll demonstrate applying API access controls to different real-world scenarios. Finally, we&amp;#8217;ll share a preview of the roadmap for Red Hat 3scale API Management.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153589"&gt;Best practices for securing the container life cycle&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365714"&gt;Laurent Domb&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365748"&gt;Kirsten Newcomer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;IT organizations are using container technology and DevOps processes to bring new-found agility to delivering applications that create business value. However, enterprise use requires strong security at every stage of the life cycle. Nothing is secure by default—security takes work. You need defense in depth. Red Hat delivers multiple layers of security controls throughout your applications, infrastructure, and processes to help you minimize security risks.&lt;/p&gt; &lt;p&gt;In this session, Red Hat’s Laurent Domb and Kirsten Newcomer will identify the 10 most common layers in a typical container deployment and deliver a deep-dive on best practices for securing containers through the CI/CD process, including verifying container provenance, creating security gates and policies, and managing updates to deployed containers.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153698"&gt;Distributed API management in a hybrid cloud environment&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365861"&gt;Thomas Siegrist&lt;/a&gt; (Swiss Federal Railways), &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365862"&gt;Christian Sanabria&lt;/a&gt; (IPT), &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_2" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365863"&gt;Christoph Eberle&lt;/a&gt; (Red Hat)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;Swiss Railways operates a substantial Red Hat OpenShift hybrid cloud installation, hosting many thousand containers. Introducing microservices at scale and moving to hybrid container infrastructures introduces a new set of challenges. What about security, life cycle, dependencies, governance, and self-service with thousands of services on a hybrid environment?&lt;/p&gt; &lt;p&gt;To handle the enormous growth of APIs, an API management platform based on 3scale by Red Hat on-premise and Red Hat single sign-on (SSO) was built, integrating internal and external IdPs. The solution is portable, scalable, and highly available, and all processes are automated and available as self service. The platform is in production, serving multiple critical internal and external APIs targeting 100K+ API calls per second.&lt;/p&gt; &lt;p&gt;In this session, you will learn about the benefits of building a fully automated self-service API management and SSO platform in a distributed, hybrid environment, how we approached the project, what challenges we faced, and how we solved them.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154730"&gt;DevSecOps with disconnected Red Hat OpenShift&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366895"&gt;Mike Battles&lt;/a&gt; (Red Hat), &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366896"&gt;Chase Barrette&lt;/a&gt; (MITRE Corporation), &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_2" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366897"&gt;Stuart Bain&lt;/a&gt; (Red Hat), &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_3" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=393772"&gt;Jeremy Sontag&lt;/a&gt; (Red Hat)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;MITRE and Red Hat Consulting worked together with the U.S. Air Force Program Management Office to develop a system that fulfills the mission requirements of a containerized DevSecOps platform. Using an Infrastructure-as-Code model, the team was able to produce a self-contained, bootable DVD that automates the installation of Red Hat OpenShift Container Platform and related components, with the following characteristics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Dev&lt;/strong&gt;&lt;/em&gt;—Replicable, consistent runtime environment across multiple sites. Extends native deployment pipeline functionality to support development through production via air-gapped, secure environments.&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Sec&lt;/strong&gt;&lt;/em&gt;—Secured out of the box via automation and hardening tools to comply with U.S. Government security baselines, STIG, and FIPS requirements via OpenSCAP and Red Hat Ansible Automation. STIG-compliant reference configurations for Red Hat JBoss EAP, Red Hat JBoss AMQ, and PostgreSQL.&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Ops&lt;/strong&gt;&lt;/em&gt;—Fully autonomous installation of Red Hat OpenShift, Red Hat CloudForms, container-native storage with Red Hat Gluster Storage, and Red Hat Enterprise Linux into a bare metal or virtual environment.&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153594"&gt;OpenShift + Single sign-on = Happy security teams and happy users&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365750"&gt;Dustin Minnich&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365751"&gt;Josh Cain&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_2" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365752"&gt;Jared Blashka&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_3" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365753"&gt;Brian Atkisson&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;One&lt;em&gt; username and password to rule them all.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;In this lab, we&amp;#8217;ll discuss and demonstrate single sign-on technologies and how to implement them using Red Hat products. We&amp;#8217;ll take you through bringing up an OpenShift cluster in a development environment, installing Red Hat single sign-on on top of it, and then integrating that with a variety of example applications.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163864"&gt;Shift security left—and right—in the container life cycle&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365685"&gt;Siamak Sadeghianfar&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365748"&gt;Kirsten Newcomer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;The black hat hackers of the world are making the internet a challenging place and have forced all of us to spend a tremendous amount of time securing our systems and apps. In this BOF, join Red Hat and partners AquaSecurity, Black Duck, Sonatype, and Twistlock for a conversation about shifting security left—and right—in the container lifecycle. if you aren’t familiar with the shift-left principle, attend the session to find out how it helps you to improve container security.&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Don&amp;#8217;t miss Red Hat Summit 2018&lt;/h2&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/summit/2018"&gt;&lt;strong&gt;Red Hat Summit 2018&lt;/strong&gt;&lt;/a&gt; is May 8th &amp;#8211; 10th in San Francisco, CA at the Moscone Center.  Register early to save on a full conference pass.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/"&gt;List of all sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Application%20development=2"&gt;Application development sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Security=2"&gt;Security sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?API%20management=2"&gt;API Management sessions&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fsummit-2018-develop-secure-apps-services%2F&amp;#38;title=Red%20Hat%20Summit%202018%3A%20Develop%20Secure%20Apps%20and%20Services" data-a2a-url="https://developers.redhat.com/blog/2018/04/06/summit-2018-develop-secure-apps-services/" data-a2a-title="Red Hat Summit 2018: Develop Secure Apps and Services"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/06/summit-2018-develop-secure-apps-services/"&gt;Red Hat Summit 2018: Develop Secure Apps and Services&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/iWwJ9y5Z3MQ" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Summit 2018 will focus on modern application development. A critical part of modern application development is of course securing your applications and services. Things were challenging when you only needed to secure a single monolithic application. In a modern application landscape, you’re probably looking at building microservices and possibly exposing application services and APIs outsi...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-06T15:55:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/06/summit-2018-develop-secure-apps-services/</feedburner:origLink></entry><entry><title>Red Hat scripting languages for beta: adds Ruby 2.5, Perl 5.26; updates PHP 7.1.8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bLcRkgiuuBY/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="perl" scheme="searchisko:content:tags" /><category term="php" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><category term="Ruby" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_scripting_languages_for_beta_adds_ruby_2_5_perl_5_26_updates_php_7_1_8</id><updated>2018-04-06T13:04:07Z</updated><published>2018-04-06T13:04:07Z</published><content type="html">&lt;p&gt;Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as &lt;a href="https://developers.redhat.com/products/softwarecollections/overview/"&gt;Red Hat Software Collections&lt;/a&gt; (scripting languages, open source databases, web tools, etc.), &lt;a href="https://developers.redhat.com/products/developertoolset/overview/"&gt;Red Hat Developer Toolset&lt;/a&gt; (GCC), and the recently added compiler toolsets &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/overview/"&gt;Clang/LLVM, Go, and Rust&lt;/a&gt;. All are yum installable, and are included in most Red Hat Enterprise Linux subscriptions and all Red Hat Enterprise Linux Developer Subscriptions. Most Red Hat Software Collections and Red Hat Developer Toolset components are also available as Linux container images for hybrid cloud development across Red Hat Enterprise Linux, Red Hat OpenShift Container Platform, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Red Hat Software Collections 3.1 beta brings the following new/updated scripting languages:&lt;/strong&gt;&lt;span id="more-478797"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;New addition: &lt;strong&gt;Ruby 2.5&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;Ruby 2.5.0 is the first stable release of the Ruby 2.5 series. It introduces many new features and performance improvements. The notable changes are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Rescue/else/ensure are now allowed to be used directly with do/end blocks.&lt;/li&gt; &lt;li&gt;Add yield_self to yield given block in its context. Unlike tap, it returns the result of the block.&lt;/li&gt; &lt;li&gt;Support branch coverage and method coverage measurement. The branch coverage indicates which branches are executed and which are not. The method coverage indicates which methods are invoked and which are not. By running a test suite with these new features, you will know which branches and methods are executed, and evaluate total coverage of the test suite more strictly.&lt;/li&gt; &lt;li&gt;Hash#slice and Hash#transform_keys.&lt;/li&gt; &lt;li&gt;Struct.new can create classes that accept keyword arguments.&lt;/li&gt; &lt;li&gt;Enumerable#any?, all?, none?, and one? accept a pattern argument.&lt;/li&gt; &lt;li&gt;Top-level constant look-up is no longer available.&lt;/li&gt; &lt;li&gt;One of our most loved libraries, pp.rb, is now automatically loaded. You no longer have to write require &amp;#8220;pp&amp;#8221;.&lt;/li&gt; &lt;li&gt;Print backtrace and error message in reverse order (oldest call first, most recent call last). When a long backtrace appears on your terminal (TTY), you can easily find the cause line at the bottom of the backtrace. Note that the order is reversed only when the backtrace is printed out to the terminal directly. [experimental]&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RHSCL contains Ruby 1.9.3, Ruby 2.0, Ruby 2.2, Ruby 2.3, and Ruby 2.4&lt;/li&gt; &lt;li&gt;RHEL 6 has Ruby 1.8.7&lt;/li&gt; &lt;li&gt;RHEL 7 includes Ruby 2.0&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Ruby 2.5 is for RHEL 7 only.&lt;/p&gt; &lt;p&gt;&lt;span class="package"&gt;Package name: rh-ruby25&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Linux container image: rhscl-beta/ruby-25-rhel7&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;New addition: Perl 5.26&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;The Perl 5.26 release has significant performance increases over previous versions. Performance changes include improvements in hashing, readline, optimized array and hash assignment, conversion of a single digit string to a number, split, and reference assignment. This release also includes an update to Perl’s fantastic Unicode support with the addition of Unicode 9.0. This is a fairly minor update with some new character sets and 72 new emoji characters.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RHEL 6 includes Perl 5.10&lt;/li&gt; &lt;li&gt;RHEL7 includes Perl 5.16&lt;/li&gt; &lt;li&gt;RHSCL contains Perl 5.16, 5.20, 5.24, and now 5.26&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Per 5.26 is for RHEL 7 only.&lt;/p&gt; &lt;p&gt;&lt;span class="package"&gt;Package name: &lt;/span&gt;rh-perl526&lt;/p&gt; &lt;p&gt;Linux container image: rhscl-beta/perl-526-rhel7&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Updated version: PHP 7.0.27&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;PHP 7.0 was a significant new release of PHP. PHP 7.1 now brings with it a number of useful features, ranging from short array destructuring, to negative string offsets, to improved return types.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;RHEL 6 has PHP 5.3&lt;br /&gt; RHEL7 has PHP 5.4&lt;br /&gt; RHSCL has PHP 5.5, 5.6, 7.0, 7.1&lt;/p&gt; &lt;p&gt;PHP 7.0.27 is for RHEL 6 &amp;#38; 7; x86_64.&lt;/p&gt; &lt;p&gt;&lt;span class="package"&gt;Package name: &lt;/span&gt;rh-php70&lt;/p&gt; &lt;p&gt;Linux container image: rhscl-beta/php-70-rhel7&lt;/p&gt; &lt;h2&gt;REFERENCES:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;See the &lt;a href="https://developers.redhat.com/products/softwarecollections/hello-world/"&gt;Hello World&lt;/a&gt; for quick installation of Software Collections.&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3-beta/html/3.1_release_notes/"&gt;RHSCL 3.1 beta Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3-beta/html/using_red_hat_software_collections_container_images/"&gt;RHSCL 3.1 beta Using Container Images&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;linkname=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8%2F&amp;#38;title=Red%20Hat%20scripting%20languages%20for%20beta%3A%20adds%20Ruby%202.5%2C%20Perl%205.26%3B%20updates%20PHP%207.1.8" data-a2a-url="https://developers.redhat.com/blog/2018/04/06/red-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8/" data-a2a-title="Red Hat scripting languages for beta: adds Ruby 2.5, Perl 5.26; updates PHP 7.1.8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/06/red-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8/"&gt;Red Hat scripting languages for beta: adds Ruby 2.5, Perl 5.26; updates PHP 7.1.8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bLcRkgiuuBY" height="1" width="1" alt=""/&gt;</content><summary>Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as Red Hat Software Collections (scripting languages, open source databases, web tools, etc.), Red Hat Developer Toolset (GCC), and the r...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-06T13:04:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/06/red-hat-scripting-languages-beta-adds-ruby-2-5-perl-5-26-updates-php-7-1-8/</feedburner:origLink></entry><entry><title>Red Hat adds/updates web tools for beta: HAProxy 1.8, Varnish 5.0, Apache httpd 2.4</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vMYP5p76Q4I/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="Apache http" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="HAProxy" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><category term="varnish" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_adds_updates_web_tools_for_beta_haproxy_1_8_varnish_5_0_apache_httpd_2_4</id><updated>2018-04-06T13:03:32Z</updated><published>2018-04-06T13:03:32Z</published><content type="html">&lt;p&gt;Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as &lt;a href="https://developers.redhat.com/products/softwarecollections/overview/"&gt;Red Hat Software Collections&lt;/a&gt; (scripting languages, open source databases, web tools, etc.), &lt;a href="https://developers.redhat.com/products/developertoolset/overview/"&gt;Red Hat Developer Toolset&lt;/a&gt; (GCC), and the recently added compiler toolsets &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/overview/"&gt;Clang/LLVM, Go, and Rust&lt;/a&gt;. All are yum installable, and are included in most Red Hat Enterprise Linux subscriptions and all Red Hat Enterprise Linux Developer Subscriptions. Most Red Hat Software Collections and Red Hat Developer Toolset components are also available as Linux container images for hybrid cloud development across Red Hat Enterprise Linux, Red Hat OpenShift Container Platform, etc.&lt;/p&gt; &lt;h4&gt;With the new Red Hat Software Collections 3.1 beta release, these web tools are now available:&lt;/h4&gt; &lt;p&gt;&lt;span id="more-478837"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;New addition: Varnish 5.0&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;This release of Red Hat Software Collections includes Varnish 5.0. Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. It is installed in front of a web server that speaks HTTP and is configured to cache the contents. Varnish has very high performance and a highly extensible built-in configuration language. It typically speeds up delivery with a factor of 300 – 1000x. Varnish only caches HTTP, it does not support other web protocols.&lt;/p&gt; &lt;p&gt;Varnish 5.0 is for RHEL7 Only.&lt;/p&gt; &lt;p&gt;Package name: rh-varnish5&lt;/p&gt; &lt;p&gt;Linux container image: &lt;a href="https://access.redhat.com/containers/#/search/varnish"&gt;rhscl-beta/varnish-5-rhel7&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;New addition: &lt;/strong&gt;&lt;strong&gt;HAProxy 1.8&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;This release of Red Hat Software Collections adds a new HAProxy collection.&lt;/p&gt; &lt;p&gt;The latest stable upstream release is 1.8, which contains many new features that are of interest to customers and required by other Red Hat products (eg. OpenStack, OpenShift). Since a rebase in RHEL7 would break compatibility, the latest stable haproxy is added to RHSCL.&lt;/p&gt; &lt;p&gt;HAProxy is free, open source software that provides a high availability load balancer and proxy server for TCP and HTTP-based applications that spread requests across multiple servers.&lt;/p&gt; &lt;p&gt;HAProxy is available for use with RHEL7 and x86_64 architecture only. Currently, haproxy-1.5 is available in RHEL7.&lt;/p&gt; &lt;p&gt;Package name: rh-haproxy18&lt;/p&gt; &lt;h2&gt;Apache &lt;strong&gt;httpd24 updated to include mod_auth_mellon&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;This version of Red Hat Software Collections updates Apache HTTP Server version 2.4 to include mod_auth_mellon. Apache HTTP is a project of the Apache Software Foundation and is the number one HTTP server on the internet. The mod_auth_mellon package is currently available in RHEL7 for use with the base version of httpd. This update includes mod_auth_mellon in the RHSCL httpd24 collection.&lt;/p&gt; &lt;p&gt;Using Apache 2.4, web developers can achieve the performance of other “fast” web servers without having to switch to newer web servers such as Nginx. Many enterprises make use of SAML for authentication and also make use of Python. The supported method for using Python 3 in RHEL is via SCL. SCL Python uses SCL httpd24 for wsgi. SCL httpd24 now has mod_auth_mellon.&lt;/p&gt; &lt;p&gt;Now users of the RHSCL http24 collection can move to Django 2.x, which only supports Python 3. Many applications are dropping support for Django 1.x, now that 2.x is stable and maturing.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RHSCL contains Apache 2.4&lt;/li&gt; &lt;li&gt;RHEL 6 contains Apache 2.2&lt;/li&gt; &lt;li&gt;RHEL7 contains Apache 2.4&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Apache httpd24 is available for both RHEL 6 and 7; mod_auth_mellon is for RHEL7 only.&lt;/p&gt; &lt;p&gt;Package name: httpd24&lt;/p&gt; &lt;p&gt;Linux container image: rhscl-beta/httpd-24-rhel7&lt;/p&gt; &lt;h2&gt;REFERENCES:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;See the &lt;a href="https://developers.redhat.com/products/softwarecollections/hello-world/"&gt;Hello World&lt;/a&gt; for quick installation of Software Collections.&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3-beta/html/3.1_release_notes/"&gt;RHSCL 3.1 beta Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3-beta/html/using_red_hat_software_collections_container_images/"&gt;RHSCL 3.1 beta Using Container Images&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;linkname=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4%2F&amp;#38;title=Red%20Hat%20adds%2Fupdates%20web%20tools%20for%20beta%3A%20HAProxy%201.8%2C%20Varnish%205.0%2C%20Apache%20httpd%202.4" data-a2a-url="https://developers.redhat.com/blog/2018/04/06/red-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4/" data-a2a-title="Red Hat adds/updates web tools for beta: HAProxy 1.8, Varnish 5.0, Apache httpd 2.4"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/06/red-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4/"&gt;Red Hat adds/updates web tools for beta: HAProxy 1.8, Varnish 5.0, Apache httpd 2.4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vMYP5p76Q4I" height="1" width="1" alt=""/&gt;</content><summary>Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as Red Hat Software Collections (scripting languages, open source databases, web tools, etc.), Red Hat Developer Toolset (GCC), and the r...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-06T13:03:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/06/red-hat-adds-updates-web-tools-beta-haproxy-1-8-varnish-5-0-apache-httpd-2-4/</feedburner:origLink></entry><entry><title>New Red Hat compilers toolsets in beta: Clang and LLVM, GCC, Go, Rust</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oiJPRtCizwY/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="developer toolset" scheme="searchisko:content:tags" /><category term="dts" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Rust" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-new_red_hat_compilers_toolsets_in_beta_clang_and_llvm_gcc_go_rust</id><updated>2018-04-06T13:02:41Z</updated><published>2018-04-06T13:02:41Z</published><content type="html">&lt;p&gt;Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as &lt;a href="https://developers.redhat.com/products/softwarecollections/overview/"&gt;Red Hat Software Collections&lt;/a&gt; (scripting languages, open source databases, web tools, etc.), &lt;a href="https://developers.redhat.com/products/developertoolset/overview/"&gt;Red Hat Developer Toolset&lt;/a&gt; (GCC), and the recently added compiler toolsets &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/overview/"&gt;Clang/LLVM, Go, and Rust&lt;/a&gt;. All are yum installable, and are included in most Red Hat Enterprise Linux subscriptions and all Red Hat Enterprise Linux Developer Subscriptions. Most Red Hat Software Collections and Red Hat Developer Toolset components are also available as Linux container images for hybrid cloud development across Red Hat Enterprise Linux, Red Hat OpenShift Container Platform, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;The new/updated compiler toolsets are:&lt;/strong&gt;&lt;span id="more-478737"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;New version of the GCC compiler toolset:  Red Hat Developer Toolset 7.1 with GCC 7.3&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;This is an update of the latest stable upstream updates of GCC 7. Developer Toolset (DTS) users are encouraged to update to DTS 7.1.&lt;/p&gt; &lt;p&gt;The latest GNU Compiler Collection major release, GCC 7.3, brings substantial new functionality, including experimental support for the current C++17 draft, better diagnostics, and an improved optimizer, with many new intra- and inter-procedural optimizations. With respect to diagnostics, GCC 7 brings improved locations, location ranges, suggestions for misspelled identifiers, option names, fix-it hints, and new warnings.&lt;/p&gt; &lt;p&gt;DTS 7 is available for the following architectures:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;x86_64 (RHEL 6 &amp;#38; 7 )&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;ppc64le&lt;/span&gt; (RHEL 6)&lt;/li&gt; &lt;li&gt;aarch64 (RHEL 6)&lt;/li&gt; &lt;li&gt;s390x (RHEL 6)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Where to find other versions of GCC and DTS?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;DTS 6.1 has GCC version 6.3&lt;/li&gt; &lt;li&gt;DTS 4.1 has GCC version 5&lt;/li&gt; &lt;li&gt;(There is no DTS 5)&lt;/li&gt; &lt;li&gt;RHEL7 has GCC version 4.8&lt;/li&gt; &lt;li&gt;RHEL6 has GCC version 4.4&lt;/li&gt; &lt;li&gt;Updated DTS tools in DTS 7&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Linux Container image: rhscl-beta/devtoolset-7-toolchain-rhel7&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;New version of the Clang and LLVM compiler toolset:  Clang and LLVM 5.0&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;Clang is an &amp;#8220;LLVM native&amp;#8221; C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles, extremely useful error and warning messages, and to provide a platform for building great source level tools. The Clang Static Analyzer is a tool that automatically finds bugs in your code, and is a great example of the sort of tool that can be built using the Clang frontend as a library to parse C/C++ code. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for the RHEL CPU architectures.&lt;/p&gt; &lt;p&gt;The Clang and LLVM toolset will release in the devtools repo as Tech Preview for RHEL 7 only. Customers are encouraged to use and evaluate the compiler but not to build applications for production. Frequent updates, not necessarily backward compatible, are planned until the LLVM toolset is considered stable enough for production support. There is currently no Clang and LLVM toolset available in RHEL7.&lt;/p&gt; &lt;p&gt;The Clang and LLVM toolset is Tech Preview for RHEL 7 for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;x86_64&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;ppc64le&lt;/span&gt;&lt;/li&gt; &lt;li&gt;aarch64&lt;/li&gt; &lt;li&gt;s390x&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following packages are included in this release:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;llvm-toolset-7-llvm&lt;/li&gt; &lt;li&gt;llvm-toolset-7-clang&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;strong&gt;New version of the Go compiler toolset: &lt;/strong&gt;&lt;strong&gt;Golang 1.8.7&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;This release of the Go toolset introduces a new version of the Golang1.8.7 compiler for use by RHEL customers and partners.&lt;/p&gt; &lt;p&gt;Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It&amp;#8217;s a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.&lt;/p&gt; &lt;p&gt;Currently, a Golang compiler is available in the Optional channel of RHEL7. Long term, the compiler in Optional will be dropped in favor of this new Go toolset in devtools.&lt;/p&gt; &lt;p&gt;RHEL developers now have the latest stable version of the upstream Go compiler for application development on RHEL7. The Go toolset will release in devtools as Tech Preview. Customers are encouraged to use and evaluate the compiler but not to build applications for production. Frequent updates, not necessarily backward compatible, are planned until the Go toolset is considered stable enough for production support.&lt;/p&gt; &lt;p&gt;The Go toolset is Tech Preview for RHEL 7 and is available for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;x86_64&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;ppc64le&lt;/span&gt;&lt;/li&gt; &lt;li&gt;aarch64&lt;/li&gt; &lt;li&gt;s390x&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Package name:  go-toolset-7-golang&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;New version of the Rust compiler toolset: &lt;/strong&gt;&lt;strong&gt;Rust 1.24&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;The first release of the Rust toolset is based on Rust version 1.20.&lt;/p&gt; &lt;p&gt;Rust is an open source systems programming language created by Mozilla and a community of volunteers, designed to help developers create fast, secure applications which take full advantage of the powerful features of modern multi-core processors. It prevents segmentation faults and guarantees thread safety, all with an easy-to-learn syntax. In addition, Rust offers zero-cost abstractions, move semantics, guaranteed memory safety, threads with no data races, trait-based generics, pattern matching, type inference, and efficient C bindings, with a minimum runtime size.&lt;/p&gt; &lt;p&gt;Cargo is Rust’s package manager and build tool. It allows Rust projects to declare dependencies with specific version requirements. Cargo will resolve the full dependency graph, download packages as needed, and build and test the entire project.&lt;/p&gt; &lt;p&gt;Rust was added to RHEL devtools channel with RHSCL 3.0 (late 2017).&lt;/p&gt; &lt;p&gt;The Rust toolset is Tech Preview for RHEL 7 and is available for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;x86_64&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;ppc64le&lt;/span&gt;&lt;/li&gt; &lt;li&gt;aarch64&lt;/li&gt; &lt;li&gt;s390x&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following packages are included in this release:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;rust-toolset-7&lt;/li&gt; &lt;li&gt;rust-toolset-7-rust&lt;/li&gt; &lt;li&gt;rust-toolset-7-cargo&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;REFERENCES:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Developer Toolset and GCC 7.3 &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/hello-world/"&gt;Hello World&lt;/a&gt; and &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/"&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Clang/LLVM 5.0, Go 1.8.7, and Rust 1.24:  &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/hello-world/"&gt;Hello World&lt;/a&gt; and &lt;a href="https://access.redhat.com/documentation/en/red-hat-developer-tools?version=2018.2%20Beta"&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;linkname=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fnew-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust%2F&amp;#38;title=New%20Red%20Hat%20compilers%20toolsets%20in%20beta%3A%20Clang%20and%20LLVM%2C%20GCC%2C%20Go%2C%20Rust" data-a2a-url="https://developers.redhat.com/blog/2018/04/06/new-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust/" data-a2a-title="New Red Hat compilers toolsets in beta: Clang and LLVM, GCC, Go, Rust"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/06/new-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust/"&gt;New Red Hat compilers toolsets in beta: Clang and LLVM, GCC, Go, Rust&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oiJPRtCizwY" height="1" width="1" alt=""/&gt;</content><summary>Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as Red Hat Software Collections (scripting languages, open source databases, web tools, etc.), Red Hat Developer Toolset (GCC), and the r...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-06T13:02:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/06/new-red-hat-compilers-in-beta-clang-llvm-gcc-go-rust/</feedburner:origLink></entry><entry><title>Red Hat open source databases in beta: Adds PostgreSQL 10, MongoDB 3.6; updates MySQL 5.7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sCX0LpmaPjo/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="mongodb" scheme="searchisko:content:tags" /><category term="mysql" scheme="searchisko:content:tags" /><category term="PostgreSQL" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_open_source_databases_in_beta_adds_postgresql_10_mongodb_3_6_updates_mysql_5_7</id><updated>2018-04-06T13:01:05Z</updated><published>2018-04-06T13:01:05Z</published><content type="html">&lt;p&gt;Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as &lt;a href="https://developers.redhat.com/products/softwarecollections/overview/"&gt;Red Hat Software Collections&lt;/a&gt; (scripting languages, open source databases, web tools, etc.), &lt;a href="https://developers.redhat.com/products/developertoolset/overview/"&gt;Red Hat Developer Toolset&lt;/a&gt; (GCC), and the recently added compiler toolsets &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/overview/"&gt;Clang/LLVM, Go, and Rust&lt;/a&gt;. All are yum installable, and are included in most Red Hat Enterprise Linux subscriptions and all Red Hat Enterprise Linux Developer Subscriptions. Most Red Hat Software Collections and Red Hat Developer Toolset components are also available as Linux container images for hybrid cloud development across Red Hat Enterprise Linux, Red Hat OpenShift Container Platform, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Red Hat Software Collections 3.1 beta brings the following new/updated open source databases:&lt;/strong&gt;&lt;span id="more-478867"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;New addition:  &lt;strong&gt;PostgreSQL 10&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;PostgreSQL is a powerful, open source object-relational database system with more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness. The following features are new in PostgreSQL 10:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Logical Replication &amp;#8211; A publish/subscribe framework for distributing data&lt;/li&gt; &lt;li&gt;Declarative Table Partitioning &amp;#8211; Convenience in dividing your data&lt;/li&gt; &lt;li&gt;Improved Query Parallelism &amp;#8211; Quickly conquer your analysis&lt;/li&gt; &lt;li&gt;Quorum Commit for Synchronous Replication &amp;#8211; Distribute data with confidence&lt;/li&gt; &lt;li&gt;SCRAM-SHA-256 authentication &amp;#8211; Secure your data access&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This release also marks the change of the versioning scheme for PostgreSQL to an &amp;#8220;x.y&amp;#8221; format. This means the next minor release of PostgreSQL will be 10.1 and the next major release will be 11.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RHSCL includes PostgreSQL 9.2, 9.4, 9.5, and 9.6&lt;/li&gt; &lt;li&gt;RHEL 6 includes PostgreSQL 8.4&lt;/li&gt; &lt;li&gt;RHEL7 includes PostgreSQL 9.2&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;RHEL developers and users have the newest stable version of PostgreSQL for application development requiring a database.&lt;/p&gt; &lt;p&gt;The PostgreSQL 10 release includes significant enhancements to effectively implement the ability to distribute data across many nodes for faster access, management, and analysis, including native logical replication, declarative table partitioning, and improved query parallelism.&lt;/p&gt; &lt;p&gt;For RHEL7 Only&lt;/p&gt; &lt;p&gt;Package: rh-postgresql10&lt;/p&gt; &lt;p&gt;Linux container image: rhscl-beta/postgresql-10-rhel7&lt;/p&gt; &lt;h2&gt;New addition:  MongoDB3.6&lt;/h2&gt; &lt;p&gt;MongoDB 3.6 is the latest release of the leading database for modern applications, a culmination of native database features and enhancements that will allow you to easily evolve your solutions to address emerging challenges and use cases.&lt;/p&gt; &lt;p&gt;Allowing developers to persist rich, nested data without flattening it out is one of MongoDB’s defining strengths. Documents can model any kind of data: key value, graph, and relational data sets are as much at home in documents as heterogeneous, nested structures are. MongoDB Server 3.6, makes the query language much more powerful, with new array update operators that allow you to specify in-place updates to specific, matching array items, at any depth of nesting. Extensions to the $lookup aggregation stage now allow uncorrelated subqueries and multiple matching conditions, so referencing and joining documents in complex combinations can be handled in the database.&lt;/p&gt; &lt;p&gt;Modern applications need to respond instantaneously to changes, providing notifications to their users and interfaces that update live. To enable this, MongoDB 3.6 introduces Change Streams, which applications can use to get real-time notification of updates to collect data.&lt;/p&gt; &lt;p&gt;A key characteristic of robust systems is that they handle network outages gracefully, but the defensive coding to handle them can represent a significant burden on developers. MongoDB 3.6 alleviates that burden with Retryable Writes, a new feature ensuring that writes are performed exactly once, even in the face of outages.&lt;/p&gt; &lt;p&gt;As of this release, MongoDB Server itself will default to refusing all connections unless they are from a whitelisted IP.&lt;br /&gt; The flexibility of documents is fully compatible with data validation, and MongoDB 3.6 improves on its previous capabilities with the introduction of JSON Schema. Using JSON Schema, you can specify (in JSON), on a per-collection basis, exactly what qualifies as a valid document, such as the types a field can have, whether it is required, and if a document permits fields not listed in the spec. With MongoDB 3.6, the schema isn’t a straightjacket, it’s framework of validation you can tune to exactly the degree you need.&lt;/p&gt; &lt;p&gt;The BI Connector, introduced last year, has been completely re-written for MongoDB 3.6 making it run much faster and easier to manage. The BI connector 2.0 is much better at translating SQL queries into MongoDB’s native aggregation framework, so it can push much more work directly down to MongoDB, instead of having to do it itself in memory.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RHSCL includes MongoDB 2.4, 2.6, 3.2 3.4 and now 3.6.&lt;/li&gt; &lt;li&gt;MongoDB is not included in any version of RHEL.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For RHEL7 Only&lt;/p&gt; &lt;p&gt;Package name: rh-mongodb36&lt;/p&gt; &lt;p&gt;Linux container image: rhscl-beta/mongodb-36-rhel7&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Updated: MySQL 5.7 for ppc64le, s390x, and aarch64&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;MySQL 5.7 is the latest version of the world’s most popular open source database. The new version delivers greater performance, scalability, and manageability, plus enhanced NoSQL capabilities with JSON support and MySQL Router, which makes it easy to connect applications to multiple MySQL databases. This release of Red Hat Software Collections makes the MySQL 5.7 collection available for ppc64le, s390x, and aarch64 architectures. Previously, MySQL 5.7 was available only for Intel x86_64.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What versions are available and where?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RHSCL includes MySQL 5.5, 5.6, and 5.7&lt;/li&gt; &lt;li&gt;RHEL6 includes MySQL 5.1&lt;/li&gt; &lt;li&gt;RHEL7 does not include MySQL.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For RHEL7 Only&lt;/p&gt; &lt;p&gt;Package name: rh-mysql57&lt;/p&gt; &lt;h2&gt;REFERENCES:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;See the &lt;a href="https://developers.redhat.com/products/softwarecollections/hello-world/"&gt;Hello World&lt;/a&gt; for quick installation of Software Collections.&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3-beta/html/3.1_release_notes/"&gt;RHSCL 3.1 beta Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3-beta/html/using_red_hat_software_collections_container_images/"&gt;RHSCL 3.1 beta Using Container Images&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;linkname=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F06%2Fred-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7%2F&amp;#38;title=Red%20Hat%20open%20source%20databases%20in%20beta%3A%20Adds%20PostgreSQL%2010%2C%20MongoDB%203.6%3B%20updates%20MySQL%205.7" data-a2a-url="https://developers.redhat.com/blog/2018/04/06/red-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7/" data-a2a-title="Red Hat open source databases in beta: Adds PostgreSQL 10, MongoDB 3.6; updates MySQL 5.7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/06/red-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7/"&gt;Red Hat open source databases in beta: Adds PostgreSQL 10, MongoDB 3.6; updates MySQL 5.7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sCX0LpmaPjo" height="1" width="1" alt=""/&gt;</content><summary>Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and/or web tools, etc. so that application developers will have access to the latest, stable versions. These Red Hat supported offerings are packaged as Red Hat Software Collections (scripting languages, open source databases, web tools, etc.), Red Hat Developer Toolset (GCC), and the r...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-06T13:01:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/06/red-hat-open-source-data-bases-beta-adds-postgresql-10-mongodb-3-6-updates-mysql-5-7/</feedburner:origLink></entry><entry><title>Bringing Coolstore Microservices to the Service Mesh: Part 1 – Exploring Auto-injection</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/O5eSR-3buzA/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="OpenShift Enterprise by Red Hat" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-bringing_coolstore_microservices_to_the_service_mesh_part_1_exploring_auto_injection</id><updated>2018-04-05T15:55:46Z</updated><published>2018-04-05T15:55:46Z</published><content type="html">&lt;p&gt;As the industry heads toward the &lt;a href="https://www.gartner.com/technology/research/methodologies/hype-cycle.jsp"&gt;Trough of Disillusionment&lt;/a&gt; with cloud-native microservices, finally understanding that distributed architectures introduce more complexity (weird, right?), &lt;em&gt;services meshes&lt;/em&gt; can help soften the landing and shift some of that complexity out of our applications and place it where it belongs, in the application operational layer.&lt;/p&gt; &lt;p&gt;At Red Hat we are committed to (and actively involved in) the upstream &lt;a href="https://istio.io"&gt;Istio&lt;/a&gt; project and working to integrate it into Kubernetes and &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift&lt;/a&gt; to bring the benefits of a service mesh to our customers and the wider communities involved. If you want to play with Istio, check out the &lt;a href="https://learn.openshift.com/servicemesh/"&gt;Service Mesh Tutorials on learn.Openshift.com&lt;/a&gt;. If you want to install it, follow the &lt;a href="https://istio.io/docs/setup/kubernetes/quick-start.html"&gt;Istio Kubernetes quickstart instructions&lt;/a&gt; and install it on Red Hat OpenShift 3.7 or later (or 3.9 if you want to use auto-injection).&lt;/p&gt; &lt;p&gt;&lt;span id="more-470987"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Existing Apps as a Service Mesh&lt;/h2&gt; &lt;figure id="attachment_461887" style="max-width: 300px" class="wp-caption alignright"&gt;&lt;img class="wp-image-461887 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Istio-basic-flow-300x225.png" alt="Istio basic flow" width="300" height="225" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Istio-basic-flow-300x225.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Istio-basic-flow-768x576.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Istio-basic-flow.png 960w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;figcaption class="wp-caption-text"&gt;Existing services with sidecars attached&lt;/figcaption&gt;&lt;/figure&gt; &lt;p&gt;You may have seen the new &lt;a href="https://github.com/jbossdemocentral/coolstore-microservice"&gt;Coolstore microservices demo&lt;/a&gt; floating around the Red Hat ecosystem in the last year; it&amp;#8217;s a fantastic tool for demonstrating the unique value that Red Hat brings to modern apps, and showcases key use cases around modern application development and integration using the Red Hat stack. Wouldn&amp;#8217;t it be great if we could deploy existing apps like Coolstore as a service mesh using Istio and Red Hat OpenShift? After all, one of the &lt;a href="https://istio.io/docs/concepts/what-is-istio/goals.html"&gt;Goals of Istio&lt;/a&gt; is that it transparently brings new value to existing apps without them even knowing about it. It can reduce or eliminate the need for a lot of boilerplate code in the apps themselves for dealing with retries, circuit breakers, TLS, etc.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s get to work and Istio-ify Coolstore. We&amp;#8217;ll assume you already have Red Hat OpenShift 3.9 installed. I am using Red Hat &lt;a href="https://github.com/openshift/origin/releases/tag/v3.9.0-alpha.3"&gt;OpenShift Origin 3.9.0.alpha3;&lt;/a&gt; at press time Red Hat OpenShift Container Platform 3.9 has not yet been released. We further assume you&amp;#8217;ve installed Istio 0.6.0 or later by following the &lt;a href="https://istio.io/docs/setup/kubernetes/quick-start.html"&gt;Istio Quickstart for Kubernetes&lt;/a&gt;. Clone the Coolstore repo and then play along:&lt;/p&gt; &lt;pre&gt;% git clone https://github.com/jbossdemocentral/coolstore-microservice&lt;/pre&gt; &lt;p&gt;And make sure you are logged in as a cluster administrator, or have &lt;em&gt;cluster-admin&lt;/em&gt; privileges since it will require you to make some policy and permission changes later on.&lt;/p&gt; &lt;h2&gt;Auto-injecting Sidecars&lt;/h2&gt; &lt;p&gt;With sidecar auto-injection, your app&amp;#8217;s pods are automatically festooned with Envoy proxies without even having to change the application&amp;#8217;s Deployments. This relies on &lt;a href="https://kubernetes.io/docs/admin/admission-controllers/#mutatingadmissionwebhook-beta-in-19"&gt;Kubernetes&amp;#8217; MutatingAdmissionWebhook&lt;/a&gt;, new in Kubernetes 1.9 (and therefore Red Hat OpenShift 3.9). To enable this in Red Hat OpenShift, you&amp;#8217;ll need to edit your master&amp;#8217;s config file (&lt;code&gt;master-config.yaml&lt;/code&gt;) to add the &lt;code&gt;MutatingAdmissionWebhook&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;admissionConfig: pluginConfig: MutatingAdmissionWebhook: configuration: apiVersion: v1 disable: false kind: DefaultAdmissionConfig&lt;/pre&gt; &lt;p&gt;And also enable the Kubernetes Certificate Signing API in order to use Kubernetes to sign the webhook cert (part of the &lt;a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection"&gt;automatic sidecar injection installation process&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;kubernetesMasterConfig: controllerArguments: cluster-signing-cert-file: [ ca.crt ] cluster-signing-key-file: [ ca.key ] &lt;/pre&gt; &lt;p&gt;With those changes, restart your master and then follow the &lt;a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection"&gt;automatic sidecar injection installation process&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note that Red Hat OpenShift has a much more restricted set of default security policies compared to out of the box Kubernetes, so you&amp;#8217;ll have to allow the injector webhook to run with elevated permissions, as it will try to bind to port 443 in its pod. The Istio project is aware of the complaints about it needing too much privilege, and is working to apply the &lt;a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection"&gt;principal of least privilege&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;% oc adm policy add-scc-to-user anyuid -z istio-sidecar-injector-service-account -n istio-system % oc adm policy add-scc-to-user privileged -z istio-sidecar-injector-service-account -n istio-system &lt;/pre&gt; &lt;p&gt;Then restart the injector webhook pod. When new pods are created to run application containers, the MutatingAdmissionWebhook will be consulted and given a chance to change the pod&amp;#8217;s contents. It will add the necessary &amp;#8220;sidecar&amp;#8221; containers to transparently intercept all network traffic and all inbound/outbound application traffic.&lt;/p&gt; &lt;p&gt;Next, let&amp;#8217;s create a test project to house a sample application. Give permissions to the proxy containers to allow them to do the magic, and to run with privileged users so we can rsh into it later:&lt;/p&gt; &lt;pre&gt;% oc new-project coolstore-test % oc adm policy add-scc-to-user privileged -z default,deployer % oc adm policy add-scc-to-user anyuid -z default,deployer &lt;/pre&gt; &lt;p&gt;To enable auto-injection on a Red Hat OpenShift project, you simply label the project (aka namespace):&lt;/p&gt; &lt;pre&gt;% oc label namespace $(oc project -q) istio-injection=enabled&lt;/pre&gt; &lt;p&gt;From then on, &lt;em&gt;any&lt;/em&gt; pods created within that project will get an additional container injected into it. Let&amp;#8217;s test it out real quick by creating a test pod running a basic Apache HTTPD server:&lt;/p&gt; &lt;pre&gt;% oc new-app httpd&lt;/pre&gt; &lt;p&gt;And check out the pods:&lt;/p&gt; &lt;pre&gt;% oc get pods NAME READY STATUS RESTARTS AGE httpd-1-deploy 1/2 Error 0 6s&lt;/pre&gt; &lt;p&gt;See that &lt;code&gt;1/2&lt;/code&gt; under the &lt;code&gt;READY&lt;/code&gt; column? It says 1 of 2 containers is ready.  The 2 containers are: the one that executes the deployment; and the one for the auto-injected sidecar. It&amp;#8217;s always been possible to have multiple containers in a pod, but to date, it has not been widely seen in the wild. Assumptions have been baked into various developer tools which will need revisions to be able to smoothly operate in an istio-ified universe.&lt;/p&gt; &lt;p&gt;Note that the &lt;code&gt;httpd-1-deploy&lt;/code&gt; pod isn&amp;#8217;t running the application; it&amp;#8217;s the pod that runs the Red Hat OpenShift deployment that is trying to deploy the pod that runs the application (commonly called &amp;#8220;the deployer pod&amp;#8221;). And as you can see, the status of the deployment is ERROR. The deployer pod log file reveals:&lt;/p&gt; &lt;pre&gt;% oc logs -c deployment httpd-1-deploy error: couldn't get deployment httpd-1: Get https://172.30.0.1:443/api/v1/namespaces/coolstore-test/replicationcontrollers/httpd-1: dial tcp 172.30.0.1:443: getsockopt: connection refused&lt;/pre&gt; &lt;p&gt;This is due to a &lt;a href="https://github.com/istio/istio/issues/3533"&gt;bug in Istio/Envoy&lt;/a&gt;. As a workaround, let&amp;#8217;s hack it to add some sleep time to allow the sidecar proxy extra time to initialize before the _actual_ deployment occurs:&lt;/p&gt; &lt;pre&gt;% oc patch dc/httpd -p '{ "spec": { "strategy": { "customParams": { "command": ["/bin/sh", "-c", "sleep 5; echo slept for 5; /usr/bin/openshift-deploy"]}}}}' deploymentconfig "httpd" patched&lt;/pre&gt; &lt;p&gt;Ordinarily, when you patch the deployment it would immediately trigger a new deployment. This brings us to the next problem: the previous deployment isn&amp;#8217;t ever &amp;#8220;done&amp;#8221;. The problem is that the sidecar proxy attached to the deployer pod hasn&amp;#8217;t exited (why would it?). So the pod continues to run, and the deployment will not be considered complete until this pod completes and its containers exit; which will be never (until it times out after 6 hours, at which point the entire deployment will be rolled back). Ugh!&lt;/p&gt; &lt;p&gt;So let&amp;#8217;s cancel our current running (but failed) deployment:&lt;/p&gt; &lt;pre&gt;% oc rollout cancel dc/httpd deploymentconfig "httpd" cancelling&lt;/pre&gt; &lt;p&gt;Wait for the pod to be terminated, and then trigger the deployment again:&lt;/p&gt; &lt;pre&gt;% oc rollout latest httpd deploymentconfig "httpd" rolled out&lt;/pre&gt; &lt;p&gt;Now the app should roll out since the sleep 5 will give the deployer pod some time to wait for the Istio networking magic to do its thing. Although just as before, the deployer pod will never exit. After a while you will see:&lt;/p&gt; &lt;pre&gt;% oc get pods NAME READY STATUS RESTARTS AGE httpd-2-deploy 1/2 Completed 0 56s httpd-2-rbwdq 2/2 Running 0 47s&lt;/pre&gt; &lt;p&gt;After some time, you can see the actual HTTPD application running within a container in the &lt;code&gt;httpd-2-rbwdq&lt;/code&gt; pod, and the deployer pod (&lt;code&gt;httpd-2-deploy&lt;/code&gt;) is hanging around since the proxy associated with the deployer pod never exits. Let&amp;#8217;s kill the proxy associated with the deployer pod so that the deployment finishes. We&amp;#8217;ll do this by rsh&amp;#8217;ing into the deployer pod (specifying the proxy container running istio-proxy), and use &lt;code&gt;pkill&lt;/code&gt; to kill the Istio proxy process:&lt;/p&gt; &lt;pre&gt;~ % oc rsh -c istio-proxy httpd-2-deploy pkill -f istio command terminated with exit code 137&lt;/pre&gt; &lt;p&gt;You can then run &lt;code&gt;oc get pods&lt;/code&gt; and &lt;code&gt;oc get dc/httpd&lt;/code&gt; to observe that the application is properly running with its sidecar container:&lt;/p&gt; &lt;pre&gt;~ % oc get pods NAME READY STATUS RESTARTS AGE httpd-2-m29d9 2/2 Running 0 1m ~ % oc get dc NAME REVISION DESIRED CURRENT TRIGGERED BY httpd 2 1 1 config,image(httpd:2.4)&lt;/pre&gt; &lt;h2&gt;Summary and Observations&lt;/h2&gt; &lt;p&gt;Auto-injection of Istio proxies is a compelling new feature that will breathe new life into your Red Hat OpenShift projects. However, there is some fine-tuning needed in Red Hat OpenShift to fully exploit it throughout the application lifecycle features in Red Hat OpenShift related to building and deploying applications. Other observations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The networking magic that occurs as part of the proxy initialization appears to temporarily cut off pods from the Red Hat OpenShift network; we worked around this with the veritable sleep hack, but a better solution is needed.&lt;/li&gt; &lt;li&gt;A more granular mechanism to specify which pods get auto-injected is needed. Currently, &lt;a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#understanding-what-happened"&gt;it&amp;#8217;s done at the project (Kubernetes namespace) level&lt;/a&gt; with a label, which means _every_ pod created in the namespace will get a proxy injected to it. You can also selectively disable injection per-application using the &lt;code&gt;sidecar.istio.io/inject: "true"&lt;/code&gt; annotation on the Deployment. However, it&amp;#8217;s unclear how this would affect the special &lt;em&gt;builder&lt;/em&gt; and &lt;em&gt;deployer&lt;/em&gt; pods created on behalf of applications being built or deployed in Red Hat OpenShift. A solution to this should be implemented in Red Hat OpenShift 3.10.&lt;/li&gt; &lt;li&gt;The deployment of some applications may fail with an odd error &lt;code&gt;reflect.Value.Addr of unaddressable value&lt;/code&gt; when using auto-injection. This is a &lt;a href="https://github.com/kubernetes/kubernetes/pull/53896"&gt;Go language-level bug&lt;/a&gt; that has been resolved in Kubernetes and will appear in the next releases of Red Hat OpenShift. Currently, there is no workaround other than to use manual injection, which we&amp;#8217;ll cover in the next part of this series of articles.&lt;/li&gt; &lt;li&gt;Auto-injection is great for demos and getting existing apps up and running in the mesh very quickly. However, in a production scenario, I&amp;#8217;m not sure I&amp;#8217;d want to trust the auto-injector mechanism. Manual injection allows you to do the same magic, but then commit the results to your source-code management system and does not rely on the auto-injection. Another approach I&amp;#8217;d probably take is to do builds in a separate cluster and namespace, without any auto-injection at all. Leave the injection to the deployments that occur in my production cluster/namespace.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So let&amp;#8217;s turn auto-injection off for now:&lt;/p&gt; &lt;pre&gt;% oc label namespace $(oc project -q) istio-injection-&lt;/pre&gt; &lt;p&gt;The hyphen (&lt;code&gt;-&lt;/code&gt;) at the end means &amp;#8220;delete the label&amp;#8221;.&lt;/p&gt; &lt;p&gt;In the next part of this series, we&amp;#8217;ll show you how to do manual injection (which &lt;a href="https://github.com/istio/istio/commit/0198fc5ca214fcd7b3e9f15ae471146124bef59c"&gt;as of Istio 0.6.0 supports OpenShift DeploymentConfig&lt;/a&gt; objects), which we&amp;#8217;ll apply to the entire Coolstore project for some real fun.&lt;br /&gt; Stay tuned!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F05%2Fcoolstore-microservices-service-mesh-part-1-exploring-auto-injection%2F&amp;#38;title=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%201%20%E2%80%93%20Exploring%20Auto-injection" data-a2a-url="https://developers.redhat.com/blog/2018/04/05/coolstore-microservices-service-mesh-part-1-exploring-auto-injection/" data-a2a-title="Bringing Coolstore Microservices to the Service Mesh: Part 1 – Exploring Auto-injection"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/05/coolstore-microservices-service-mesh-part-1-exploring-auto-injection/"&gt;Bringing Coolstore Microservices to the Service Mesh: Part 1 &amp;#8211; Exploring Auto-injection&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/O5eSR-3buzA" height="1" width="1" alt=""/&gt;</content><summary>As the industry heads toward the Trough of Disillusionment with cloud-native microservices, finally understanding that distributed architectures introduce more complexity (weird, right?), services meshes can help soften the landing and shift some of that complexity out of our applications and place it where it belongs, in the application operational layer. At Red Hat we are committed to (and activ...</summary><dc:creator>James Falkner</dc:creator><dc:date>2018-04-05T15:55:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/05/coolstore-microservices-service-mesh-part-1-exploring-auto-injection/</feedburner:origLink></entry></feed>
