<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Narayana JDBC integration for Tomcat</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cov_oZNFoDg/narayana-jdbc-integration-for-tomcat.html" /><category term="feed_group_name_jbosstransactions" scheme="searchisko:content:tags" /><category term="feed_name_transactions" scheme="searchisko:content:tags" /><author><name>Ondřej Chaloupka</name></author><id>searchisko:content:id:jbossorg_blog-narayana_jdbc_integration_for_tomcat</id><updated>2018-05-22T06:24:33Z</updated><published>2018-05-21T22:16:00Z</published><content type="html">&lt;p&gt; Narayana implements JTA specification in Java. It's flexible and easy to be integrated to any system which desires transaction capabilities. As proof of the Narayana extensibility check our quickstarts like &lt;a href="https://github.com/jbosstm/quickstart/tree/master/spring/narayana-spring-boot"&gt;Spring Boot one&lt;/a&gt; or &lt;a href="https://github.com/jbosstm/quickstart/tree/master/spring/camel-with-narayana-spring-boot"&gt;Camel one&lt;/a&gt;. &lt;br/&gt; But this blogpost is different integration effort. It talks in details about Narayana integration with Apache Tomcat server. &lt;/p&gt; &lt;p&gt; If you do not care about details then just jump directly to the Narayana quickstarts in this area and use the code there for yourself. &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/jbosstm/quickstart/tree/5.8.1.Final/dbcp2-and-tomcat"&gt;dbcp2-and-tomcat&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/jbosstm/quickstart/tree/5.8.1.Final/transactionaldriver/transactionaldriver-and-tomcat"&gt;transactionaldriver-and-tomcat&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/jbosstm/quickstart/tree/5.8.1.Final/jca-and-tomcat"&gt;jca-and-tomcat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; If you want more detailed understanding read further.&lt;br/&gt; All the discussed abilities are considered as the state of Narayana 5.8.1.Final or later. &lt;/p&gt; &lt;h2&gt;Narayana, database resources and JDBC interface&lt;/h2&gt; &lt;p&gt; All the proclaimed Narayana capabilities to integrate with other systems come from requirements for the system to conform with the &lt;a href="https://github.com/javaee/jta-spec"&gt;JTA specification&lt;/a&gt;. JTA expects manageable resources which follows &lt;a href="pubs.opengroup.org/onlinepubs/009680699/toc.pdf"&gt;XA specification&lt;/a&gt; in particular. For case of the database resources the underlaying API is defined by &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/"&gt;JDBC specification&lt;/a&gt;. JDBC assembled resources manageable by transaction manager under package &lt;code&gt;javax.sql&lt;/code&gt; &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/sql/package-summary.html"&gt;It defines interfaces&lt;/a&gt; used for managing XA capabilities. The probably most noticable is &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/sql/XADataSource.html"&gt;XADataSource&lt;/a&gt; which serves as factory for &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/sql/XAConnection.html"&gt;XAConnection&lt;/a&gt;. From there we can otain &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/transaction/xa/XAResource.html"&gt;XAResource&lt;/a&gt;. The &lt;code&gt;XAResource&lt;/code&gt; is interface that the transaction manager works with. The instance of it participates in &lt;a href="https://developer.jboss.org/wiki/TwoPhaseCommit2PC"&gt;the two phase commit&lt;/a&gt;. &lt;/p&gt;&lt;p&gt; The workflow is to get or create the &lt;code&gt;XADataSource&lt;/code&gt;, obtains &lt;code&gt;XAConnection&lt;/code&gt; and as next the &lt;code&gt;XAResource&lt;/code&gt; which is enlisted to the global transaction (managed by a transaction manager). Now we can call queries or statements through the &lt;code&gt;XAConnection&lt;/code&gt;. When all the business work is finished the global transaction is commanded to commit which is propagated to call the commit on each enlisted &lt;code&gt;XAResource&lt;/code&gt;s. &lt;/p&gt; &lt;p&gt; It's important to mention that developer is not expected to do all this (getting xa resources, enlisting them to transaction manager&amp;hellip;) All this handling is responsibility of the "container" which could be &lt;a href="http://wildfly.org"&gt;WildFly&lt;/a&gt;, &lt;a href="https://spring.io/guides/gs/managing-transactions"&gt;Spring&lt;/a&gt; or &lt;a href="http://tomcat.apache.org/"&gt;Apache Tomcat&lt;/a&gt; in our case. &lt;br/&gt; Normally the integration which ensures the database &lt;code&gt;XAResource&lt;/code&gt; is enlisted to the transaction is provided by some &lt;i&gt;pooling library&lt;/i&gt;. By the term &lt;i&gt;pooling library&lt;/i&gt; we means code that manages a connection pool with capability enlisting database resource to the transaction. &lt;/p&gt; &lt;p&gt; We can say at the high level that integration parts are &lt;ul&gt; &lt;li&gt;the Apache Tomcat container&lt;/li&gt; &lt;li&gt;Narayana library&lt;/li&gt; &lt;li&gt;jdbc pooling library&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; In this article we will talk about &lt;a href="https://github.com/jbosstm/narayana/tree/5.8.1.Final/ArjunaJTA/jdbc"&gt;Narayana JDBC transactional driver&lt;/a&gt;, &lt;a href="https://github.com/apache/commons-dbcp"&gt;Apache Commons DBCP&lt;/a&gt; and &lt;a href="https://github.com/ironjacamar/ironjacamar"&gt;IronJacamar&lt;/a&gt;. &lt;/p&gt; &lt;h2&gt;Narayana configuration with Tomcat&lt;/h2&gt; &lt;p&gt; After the brief overview of integration requirements, let's elaborate on common settings needed for any integration approach you choose.&lt;br/&gt; Be aware that each library needs a little bit different configuration and especially IronJacamar is specific. &lt;/p&gt; &lt;h3&gt;JDBC pooling libraries integration&lt;/h3&gt; &lt;p&gt; Narayana provides integration code in maven module &lt;a href="https://github.com/jbosstm/narayana/tree/5.8.1.Final/tomcat/tomcat-jta"&gt;&lt;code&gt;tomcat-jta&lt;/code&gt;&lt;/a&gt;. That contains the glue code which integrates Narayana to the world of the Tomcat. If you write an application you will need the following: &lt;ul&gt; &lt;li&gt;providing Narayana itself to the application classpath&lt;/li&gt; &lt;li&gt;providing Narayana &lt;code&gt;tomcat-jta&lt;/code&gt; module to the application classpath&lt;/li&gt; &lt;li&gt;configure &lt;code&gt;WEB-INF/web.xml&lt;/code&gt; with &lt;code&gt;NarayanaJtaServletContextListener&lt;/code&gt; which ensures the intialization of Narayana transaction manager&lt;/li&gt; &lt;li&gt;add &lt;code&gt;META-INF/context.xml&lt;/code&gt; which setup Tomcat to start using implementation of JTA interfaces provided by Narayana&lt;/li&gt; &lt;li&gt;configure database resources to be XA aware and cooperate with Narayana by setting them up in the &lt;code&gt;META-INF/context.xml&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; &lt;i&gt;NOTE:&lt;/i&gt; if you expect to use the IronJacamar this requirements differs a bit! &lt;/p&gt; &lt;p&gt; If we take a look at the structure of the jar to be deployed we would get the picture possibly similar to this one: &lt;pre&gt;&lt;br /&gt; ├── META-INF&lt;br /&gt; │   └── context.xml&lt;br /&gt; └── WEB-INF&lt;br /&gt; ├── classes&lt;br /&gt; │   ├── application&amp;hellip;&lt;br /&gt; │   └── jbossts-properties.xml&lt;br /&gt; ├── lib&lt;br /&gt; │   ├── arjuna-5.8.1.Final.jar&lt;br /&gt; │   ├── jboss-logging-3.2.1.Final.jar&lt;br /&gt; │   ├── jboss-transaction-spi-7.6.0.Final.jar&lt;br /&gt; │   ├── jta-5.8.1.Final.jar&lt;br /&gt; │   ├── postgresql-9.0-801.jdbc4.jar&lt;br /&gt; │   └── tomcat-jta-5.8.1.Final.jar&lt;br /&gt; └── web.xml&lt;br /&gt; &lt;/pre&gt;&lt;/p&gt; &lt;p&gt; From this summary let's overview the configuration files one by one to see what's needed to be defined there. &lt;/p&gt; &lt;h3&gt;Configuration files to be setup for the integration&lt;/h3&gt; &lt;h4&gt;WEB-INF/web.xml&lt;/h4&gt;&lt;p&gt; &lt;pre&gt;&lt;code class="xml"&gt;&lt;br /&gt; &amp;lt;web-app&amp;gt;&lt;br /&gt; &amp;lt;listener&amp;gt;&lt;br /&gt; &amp;lt;listener-class&amp;gt;org.jboss.narayana.tomcat.jta.NarayanaJtaServletContextListener&amp;lt;/listener-class&amp;gt;&lt;br /&gt; &amp;lt;/listener&amp;gt;&lt;br /&gt; &amp;lt;/web-app&amp;gt;&lt;br /&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt; The &lt;code&gt;web.xml&lt;/code&gt; needs to define the &lt;a href="https://github.com/jbosstm/narayana/blob/5.8.1.Final/tomcat/tomcat-jta/src/main/java/org/jboss/narayana/tomcat/jta/NarayanaJtaServletContextListener.java"&gt;NarayanaJtaServletContextListener&lt;/a&gt; to be loaded during context initialization to initialize the Narayana itself. Narayana needs to get running, for example, reaper thread that ensures transaction timeouts checking or thread of recovery manager. &lt;/p&gt; &lt;h4&gt;WEB-INF/clases/jbossts-properties.xml&lt;/h4&gt;&lt;p&gt; This file is not compulsory. The purpose is to configure the Narayana itself.&lt;br/&gt; If you don't use your own configuration file then the default is in charge. See more at blogpost &lt;a href="https://jbossts.blogspot.cz/2018/01/narayana-periodic-recovery-of-xa.html#configuration"&gt; Narayana periodic recovery of XA transactions &lt;/a&gt; or consider settings done by the default descriptor &lt;a href="https://github.com/jbosstm/narayana/blob/5.8.1.Final/ArjunaJTS/narayana-jts-idlj/src/main/resources/jbossts-properties.xml"&gt;jbossts-properties.xml at narayana-jts-idlj&lt;/a&gt;. &lt;/p&gt; &lt;h4&gt;META-INF/context.xml&lt;/h4&gt; &lt;p&gt; &lt;pre&gt;&lt;code class="xml"&gt;&lt;br /&gt; &amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&amp;gt;&lt;br /&gt; &amp;lt;Context antiJarLocking="true" antiResourceLocking="true"&amp;gt;&lt;br /&gt; &amp;lt;!-- Narayana resources --&amp;gt;&lt;br /&gt; &amp;lt;Transaction factory="org.jboss.narayana.tomcat.jta.UserTransactionFactory"/&amp;gt;&lt;br /&gt; &amp;lt;Resource factory="org.jboss.narayana.tomcat.jta.TransactionManagerFactory"&lt;br /&gt; name="TransactionManager" type="javax.transaction.TransactionManager"/&amp;gt;&lt;br /&gt; &amp;lt;Resource factory="org.jboss.narayana.tomcat.jta.TransactionSynchronizationRegistryFactory"&lt;br /&gt; name="TransactionSynchronizationRegistry" type="javax.transaction.TransactionSynchronizationRegistry"/&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;Resource auth="Container" databaseName="test" description="Data Source"&lt;br /&gt; factory="org.postgresql.xa.PGXADataSourceFactory" loginTimeout="0"&lt;br /&gt; name="myDataSource" password="test" portNumber="5432" serverName="localhost"&lt;br /&gt; type="org.postgresql.xa.PGXADataSource" user="test" username="test"&lt;br /&gt; uniqueName="myDataSource" url="jdbc:postgresql://localhost:5432/test"/&amp;gt;&lt;br /&gt; &amp;lt;Resource auth="Container" description="Transactional Data Source"&lt;br /&gt; factory="org.jboss.narayana.tomcat.jta.TransactionalDataSourceFactory"&lt;br /&gt; initialSize="10" jmxEnabled="true" logAbandoned="true" maxAge="30000"&lt;br /&gt; maxIdle="16" maxTotal="4" maxWaitMillis="10000" minIdle="8"&lt;br /&gt; name="transactionalDataSource" password="test" removeAbandoned="true"&lt;br /&gt; removeAbandonedTimeout="60" testOnBorrow="true" transactionManager="TransactionManager"&lt;br /&gt; type="javax.sql.XADataSource" uniqueName="transactionalDataSource"&lt;br /&gt; username="test" validationQuery="select 1" xaDataSource="myDataSource"/&amp;gt;&lt;br /&gt; &amp;lt;/Context&amp;gt;&lt;br /&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt; I divide explanation this file into two parts. First are the generic settings - those needed for transaction manager integration (top part of the &lt;code&gt;context.xml&lt;/code&gt;). The second part is on resource declaration that defines linking to the JDBC pooling library. &lt;/p&gt; &lt;h5&gt;Transaction manager integration settings&lt;/h5&gt; &lt;p&gt; We define implementation classes for the &lt;a href="https://github.com/eclipse-ee4j/jta-api"&gt;JTA api&lt;/a&gt; here. The implementation is provided by Narayana transaction manager. Those are lines of &lt;code&gt;UserTransactionFactory&lt;/code&gt; and resources of &lt;code&gt;TransactionManager&lt;/code&gt; and &lt;code&gt;TransactionSynchronizationRegistry&lt;/code&gt; in the &lt;code&gt;context.xml&lt;/code&gt; file.&lt;br/&gt;&lt;/p&gt; &lt;h5&gt;JDBC pooling library settings&lt;/h5&gt; &lt;p&gt; We aim to define database resources that can be used in the application. That's how you &lt;a href="https://github.com/jbosstm/quickstart/blob/master/dbcp2-and-tomcat/src/main/java/io/narayana/StringDao.java#L119"&gt;get the connection&lt;/a&gt; typically with code &lt;code class="java"&gt;DataSource ds = InitialContext.doLookup("java:comp/env/transactionalDataSource")&lt;/code&gt;, and eventually &lt;a href="https://github.com/jbosstm/quickstart/blob/master/dbcp2-and-tomcat/src/main/java/io/narayana/StringDao.java#L81"&gt;execute a sql statement&lt;/a&gt;. &lt;br/&gt; We define a PostgreSQL datasource with information how to create a new XA connection (we provide the host and port, credentials etc.) in the example.&lt;br/&gt; The second resource is definition of jdbc pooling library to utilize the PostgreSQL one and to provide the XA capabilities. It roughtly means putting the PostgreSQL connection to the managed pool and enlisting the work under an active transaction. &lt;br/&gt; Thus we have got two resources defined here. One is non-managed (the PosgreSQL one) and the second manages the first one to provide the ease work with the resources. For the developer is the most important to know he needs to use the managed one in his application, namely the &lt;code&gt;transactionalDataSource&lt;/code&gt; from our example. &lt;/p&gt; &lt;h5&gt;A bit about datasource configuration of Apache Tomcat context.xml&lt;/h5&gt; &lt;p&gt; Let's take a side step at this place. Before we will talk in details about supported pooling libraries let's check a little bit more about the configuration of the &lt;code&gt;Resource&lt;/code&gt; from perspective of XA connection in the &lt;code&gt;context.xml&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Looking at the &lt;code&gt;Resource&lt;/code&gt; definition there are highlighted parts which are interesting for us &lt;pre&gt;&lt;br /&gt; &amp;lt;Resource auth="Container" &lt;span style="color:rgb(255, 150, 200)"&gt;databaseName="test"&lt;/span&gt; description="Data Source"&lt;br /&gt; &lt;span style="color:rgb(255, 150, 200)"&gt;factory="org.postgresql.xa.PGXADataSourceFactory"&lt;/span&gt;&lt;br /&gt; loginTimeout="0" &lt;span style="color:rgb(255, 150, 200)"&gt;name="myDataSource"&lt;/span&gt; &lt;span style="color:rgb(255, 150, 200)"&gt;password="test"&lt;/span&gt; &lt;span style="color:rgb(255, 150, 200)"&gt;portNumber="5432"&lt;/span&gt; &lt;span style="color:rgb(255, 150, 200)"&gt;serverName="localhost"&lt;/span&gt;&lt;br /&gt; &lt;span style="color:rgb(255, 150, 200)"&gt;type="org.postgresql.xa.PGXADataSource"&lt;/span&gt; uniqueName="myDataSource"&lt;br /&gt; url="jdbc:postgresql://localhost:5432/test" &lt;span style="color:rgb(255, 150, 200)"&gt;user="test"&lt;/span&gt; username="test"/&amp;gt;&lt;br /&gt; &lt;/pre&gt;&lt;/p&gt;&lt;p&gt; &lt;ul&gt; &lt;dl&gt; &lt;dt&gt;&lt;code&gt;name&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;defines the name the resource is bound at the container and we can use the jndi lookup to find it by that name in application&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;factory&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;defines what type we will get as the final created &lt;code&gt;Object&lt;/code&gt;. The factory which we declares here is class which implements interface &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/naming/spi/ObjectFactory.html"&gt;ObjectFactory&lt;/a&gt; and from the provided properties it construct an object.&lt;br/&gt; If we would not define any &lt;code&gt;factory&lt;/code&gt; element in the definition then the Tomcat class &lt;a href="https://github.com/apache/tomcat/blob/trunk/java/org/apache/naming/factory/ResourceFactory.java#L42"&gt;ResourceFactory&lt;/a&gt; is used (see &lt;a href="https://github.com/apache/tomcat/blob/trunk/java/org/apache/naming/factory/Constants.java#L26"&gt;default factory constants&lt;/a&gt;). The &lt;code&gt;ResourceFactory&lt;/code&gt; will pass the call to the &lt;a href="https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java"&gt;BasicDataSourceFactory&lt;/a&gt; of the dbcp2 library. Here we can see the importantce of the &lt;code&gt;type&lt;/code&gt; xml parameter which defines what is the object type we want to obtain and the factory normally checks if it's able to provide such (by &lt;a href="https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java#L251"&gt;string equals check&lt;/a&gt; usually).&lt;br/&gt; The next step is generation of the object itself where the factory takes each of the &lt;a href="https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java#L365"&gt;properties and tries to applied&lt;/a&gt; them. &lt;br/&gt; In our case we use the &lt;a href="https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/xa/PGXADataSourceFactory.java"&gt;PGXADataSourceFactory&lt;/a&gt; which utilizes &lt;a href="https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/ds/common/BaseDataSource.java#L1212"&gt;some of the properties to create the &lt;code&gt;XADataSource&lt;/code&gt;&lt;/a&gt;. &lt;/dd&gt; &lt;dt&gt;&lt;code&gt;serverName&lt;/code&gt;, &lt;code&gt;portNumber&lt;/code&gt;, &lt;code&gt;databaseName&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;are properties used by the &lt;code&gt;object factory&lt;/code&gt; class to get connection from the database &lt;br/&gt; Knowing the name of the properties for the particular &lt;code&gt;ObjectFactory&lt;/code&gt; is possibly the most important when you need to configure your datasource. Here you need to check &lt;code&gt;setters&lt;/code&gt; of the factory implementation. &lt;br/&gt; In case of the &lt;code&gt;PGXADataSourceFactory&lt;/code&gt; we need to go through the inheritance hierarchy to find the properties are saved at &lt;a href="https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/ds/common/BaseDataSource.java"&gt;BaseDataSource&lt;/a&gt;. For our case for the relevant properties are &lt;code&gt;user name&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. From the &lt;code&gt;BaseDataSource&lt;/code&gt; we can see the setter for the user name is &lt;a href="https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/ds/common/BaseDataSource.java#L190"&gt;setUser&lt;/a&gt; thus the property name we look for is &lt;code&gt;user&lt;/code&gt;. &lt;/dd&gt; &lt;/dl&gt; &lt;/ul&gt;&lt;/p&gt; &lt;p&gt; After this side step let's take a look at the setup of the &lt;code&gt;Resource&lt;/code&gt;s in respect of the used pooling library. &lt;/p&gt; &lt;h3&gt;Apache Commons DBCP2 library&lt;/h3&gt; &lt;p&gt;&lt;b&gt;Quickstart:&lt;/b&gt; &lt;a href="https://github.com/jbosstm/quickstart/tree/master/dbcp2-and-tomcat"&gt;https://github.com/jbosstm/quickstart/tree/master/dbcp2-and-tomcat&lt;/a&gt;&lt;/p&gt;&lt;p&gt; The best integration comes probably with Apache Common DBCP2 as the library itself is part of the Tomcat distribution (the Tomcat code base uses &lt;a href="https://github.com/apache/tomcat/tree/trunk/java/org/apache/tomcat/dbcp/dbcp2"&gt;fork of the project&lt;/a&gt;). The XA integration is provided in Apache Tomcat version 9.0.7 and later. There is added dbcp2 package &lt;a href="https://github.com/apache/tomcat/tree/trunk/java/org/apache/tomcat/dbcp/dbcp2/managed"&gt;managed&lt;/a&gt; which knows how to enlist a resource to XA transaction. &lt;/p&gt; &lt;p&gt; The integration is similar to what we discussed in case of the JDBC transactional driver. You need to have configured two resources in &lt;code&gt;context.xml&lt;/code&gt;. One is the database datasource (&lt;a href="#contextxmldatasource"&gt;see above&lt;/a&gt;) and other is wrapper providing XA capabilities. &lt;/p&gt; &lt;pre&gt;&lt;code style="xml"&gt;&lt;br /&gt; &amp;lt;Resource name="transactionalDataSource" uniqueName="transactionalDataSource"&lt;br /&gt; auth="Container" type="javax.sql.XADataSource"&lt;br /&gt; transactionManager="TransactionManager" xaDataSource="h2DataSource"&lt;br /&gt; factory="org.jboss.narayana.tomcat.jta.TransactionalDataSourceFactory"/&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; The integration is here done over the use of the specific &lt;code&gt;factory&lt;/code&gt; which directly depends on classes from Apache Tomcat &lt;code&gt;org.apache.tomcat.dbcp.dbcp2&lt;/code&gt; package. The factory ensures the resource being enlisted to the recovery manager as well.&lt;br/&gt; The nice feature is that you can use all the DBCP2 configuration parameters for pooling as you would used when &lt;code&gt;BasicDataSource&lt;/code&gt; is configured. See the configuration options and the their meaning at the &lt;a href="https://commons.apache.org/proper/commons-dbcp/configuration.html"&gt;Apache Commons documentation&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Summary:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;Already packed in the &lt;code&gt;Apache Tomcat&lt;/code&gt; distribution from version 9.0.7&lt;/li&gt; &lt;li&gt;Configure two resources in &lt;code&gt;context.xml&lt;/code&gt;. One is the database datasource, the second is wrapper providing XA capabilities with use of the &lt;code&gt;dbcp2&lt;/code&gt; pooling capabilities integrated with &lt;code&gt;TransactionalDataSourceFactory&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt; &lt;h3&gt;Narayana jdbc transactional driver&lt;/h3&gt; &lt;p&gt;&lt;b&gt;Quickstart:&lt;/b&gt; &lt;a href="https://github.com/jbosstm/quickstart/tree/master/transactionaldriver/transactionaldriver-and-tomcat"&gt;https://github.com/jbosstm/quickstart/tree/master/transactionaldriver/transactionaldriver-and-tomcat&lt;/a&gt;&lt;/p&gt;&lt;p&gt;With this we will get back to other two recent articles about &lt;a href="https://jbossts.blogspot.cz/2017/12/narayana-jdbc-transactional-driver.html"&gt;jdbc transactional driver&lt;/a&gt; and &lt;a href="https://jbossts.blogspot.cz/2018/01/recovery-of-narayana-jdbc-transactional.html"&gt;recovery of the transactional driver&lt;/a&gt;.&lt;br/&gt;The big advantage of jdbc transactional driver is its tight integration with Narayana. It's the dependecy of the &lt;a href="https://github.com/jbosstm/narayana/tree/master/tomcat/tomcat-jta"&gt;Narayana &lt;code&gt;tomcat-jta&lt;/code&gt;&lt;/a&gt;module which contains all the integration code needed for Narayana working in Tomcat. So if you take the &lt;code&gt;tomcat-jta-5.8.1.Final&lt;/code&gt;you have packed the Narayna integration code and jdbc driver in out-of-the-box working bundle. &lt;/p&gt; &lt;h4&gt;Configuration actions&lt;/h4&gt;&lt;p&gt; Here we will define two resources in the &lt;code&gt;context.xml&lt;/code&gt; file. The first one is &lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/transactionaldriver/transactionaldriver-and-tomcat/src/main/webapp/META-INF/context.xml#L11"&gt;the database one&lt;/a&gt;. &lt;/p&gt; &lt;a id="contextxmldatasource" name="contextxmldatasource"&gt;&lt;/a&gt;&lt;pre&gt;&lt;code style="xml"&gt;&lt;br /&gt; &amp;lt;Resource name="h2DataSource" uniqueName="h2Datasource" auth="Container"&lt;br /&gt; type="org.h2.jdbcx.JdbcDataSource" username="sa" user="sa" password="sa"&lt;br /&gt; url="jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1" description="H2 Data Source"&lt;br /&gt; loginTimeout="0" factory="org.h2.jdbcx.JdbcDataSourceFactory"/&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; The database one defines data needed for preparation of datasource and creation of the connection. The datasource is not XA aware. We need to add one more layer on top which is transactional JDBC driver here. &lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/transactionaldriver/transactionaldriver-and-tomcat/src/main/webapp/META-INF/context.xml#L14"&gt;It wraps the datasource connection&lt;/a&gt; within XA capabilities. &lt;/p&gt; &lt;pre&gt;&lt;code style="xml"&gt;&lt;br /&gt; &amp;lt;Resource name="transactionalDataSource" uniqueName="transactionalDataSource"&lt;br /&gt; auth="Container" type="javax.sql.DataSource" username="sa" password="sa"&lt;br /&gt; driverClassName="com.arjuna.ats.jdbc.TransactionalDriver"&lt;br /&gt; url="jdbc:arjuna:java:comp/env/h2DataSource" description="Transactional Driver Datasource"&lt;br /&gt; connectionProperties="POOL_CONNECTIONS=false"/&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; As we do not define the element &lt;code&gt;factory&lt;/code&gt; then the default one is used which is &lt;code&gt;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&lt;/code&gt;. Unfortunately, this is fine up to the time you need to process some more sophisticated pooling strategies. In this aspect the transactional driver does not play well with the default factory and some further integration work would be needed. &lt;/p&gt; &lt;p&gt; This configuration is nice for having &lt;code&gt;transactionalDataSource&lt;/code&gt; available for the transactional work. Unfortunately, it's not all that you need to do. You miss here configuration of recovery. You need to tell the recovery manager what is the resource to care of. You can setup this in &lt;code&gt;jbossts-properties.xml&lt;/code&gt; or maybe easier way to add it to &lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/transactionaldriver/transactionaldriver-and-tomcat/run.sh#L10"&gt;environment variables of the starting Tomcat&lt;/a&gt;, for example by adding the setup under script &lt;code&gt;$CATALINA_HOME/bin/setenv.sh&lt;/code&gt;&lt;br/&gt; You define it with property &lt;a href="https://github.com/jbosstm/narayana/blob/master/ArjunaJTA/jta/classes/com/arjuna/ats/jta/common/JTAEnvironmentBean.java#L66"&gt;com.arjuna.ats.jta.recovery.XAResourceRecovery&lt;/a&gt;. &lt;/p&gt; &lt;pre&gt;&lt;code style="bash"&gt;&lt;br /&gt;-Dcom.arjuna.ats.jta.recovery.XAResourceRecovery1=com.arjuna.ats.internal.jdbc.recovery.BasicXARecovery;abs://$(pwd)/src/main/resources/h2recoveryproperties.xml&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; You can define whatever number of the resources you need the recovery is aware of. It's done by adding more &lt;code&gt;numbers&lt;/code&gt; at the end of the property name (we use &lt;code&gt;1&lt;/code&gt; in the example above). The value of the property is the class implementing &lt;code&gt;com.arjuna.ats.jta.recovery.XAResourceRecovery&lt;/code&gt;. All the properties provided to the particular implementation is concatenated after the &lt;code&gt;;&lt;/code&gt; character. In our example it's path to the &lt;code&gt;xml descriptor h2recoveryproperties.xml&lt;/code&gt;.&lt;br/&gt; When transactional driver is used then you need to declare&lt;code&gt;BasicXARecovery&lt;/code&gt; as recovery implementation class and this class needs &lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/transactionaldriver/transactionaldriver-and-tomcat/src/main/resources/h2recoveryproperties.xml"&gt;connection properties&lt;/a&gt; to be declared in the xml descriptor. &lt;/p&gt; &lt;pre&gt;&lt;code style="xml"&gt;&lt;br /&gt; &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&amp;gt;&lt;br /&gt;&amp;lt;properties&amp;gt;&lt;br /&gt; &amp;lt;entry key="DB_1_DatabaseUser"&amp;gt;sa&amp;lt;/entry&amp;gt;&lt;br /&gt; &amp;lt;entry key="DB_1_DatabasePassword"&amp;gt;sa&amp;lt;/entry&amp;gt;&lt;br /&gt; &amp;lt;entry key="DB_1_DatabaseDynamicClass"&amp;gt;&amp;lt;/entry&amp;gt;&lt;br /&gt; &amp;lt;entry key="DB_1_DatabaseURL"&amp;gt;java:comp/env/h2DataSource&amp;lt;/entry&amp;gt;&lt;br /&gt;&amp;lt;/properties&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; Note: there is option not defining the two resources under &lt;code&gt;context.xml&lt;/code&gt; and use the env property for recovery enlistment. All the configuration properties are then involved in one &lt;code&gt;properties&lt;/code&gt; file and &lt;a href="https://jbossts.blogspot.cz/2017/12/narayana-jdbc-transactional-driver.html"&gt;transactional driver dynamic class&lt;/a&gt; is used. If interested the working example is at &lt;a href="https://github.com/ochaloup/quickstart-jbosstm/tree/transactional-driver-and-tomcat-dynamic-class/transactionaldriver/transactionaldriver-and-tomcat"&gt;ochaloup/quickstart-jbosstm/tree/transactional-driver-and-tomcat-dynamic-class&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Summary:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;Already packed in the &lt;code&gt;tomcat-jta&lt;/code&gt; artifact&lt;/li&gt; &lt;li&gt;Configure two resources in &lt;code&gt;context.xml&lt;/code&gt;. One is database datasource, the second is transactional datasource wrapped by transactional driver.&lt;/li&gt; &lt;li&gt;Need to configure recovery with env variable setup &lt;code&gt;com.arjuna.ats.jta.recovery.XAResourceRecovery&lt;/code&gt; while providing xml descriptor with connection parameters&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt; &lt;h3&gt;IronJacamar&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Quickstart:&lt;/b&gt; &lt;a href="https://github.com/jbosstm/quickstart/tree/master/jca-and-tomcat"&gt;https://github.com/jbosstm/quickstart/tree/master/jca-and-tomcat&lt;/a&gt;&lt;/p&gt; &lt;p&gt; The settings of IronJacamar integration differs pretty much from what we've seen so far. The IronJacamar implements whole JCA specification and it's pretty different beast (not &lt;i&gt;just&lt;/i&gt; a jdbc pooling library). &lt;/p&gt; &lt;p&gt; The whole handling and integration is passed to IronJacamar itself.&lt;br/&gt; You don't use &lt;code&gt;tomcat-jta&lt;/code&gt; module at all.&lt;br/&gt; You need to configure all aspects in the IronJacamar &lt;code&gt;xml descriptors&lt;/code&gt;. Aspects like datasource definition, transaction configuration, pooling definition, up to the jndi binding. &lt;/p&gt; &lt;p&gt; The standalone IronJacamar is needed to be started with command &lt;code&gt;org.jboss.jca.embedded.EmbeddedFactory.create().startup()&lt;/code&gt; where you &lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/jca-and-tomcat/src/test/java/org/jboss/narayana/quickstart/jca/common/AbstractTest.java#L51"&gt;defines the descriptors to be used&lt;/a&gt;. You can configure it in &lt;code&gt;web.xml&lt;/code&gt; as &lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/jca-and-tomcat/src/main/java/org/jboss/narayana/quickstart/jca/listener/ServletContextListenerImpl.java"&gt;&lt;code&gt;ServletContextListener&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; What are descriptors to be defined: &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/jca-and-tomcat/src/main/resources/jdbc-xa.rar"&gt;jdbc-xa.rar&lt;/a&gt; which is resource adapter provided by IronJacamar itself. It needs to be part of the deployment. It's capable to process &lt;code&gt;ds&lt;/code&gt; files. &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/jca-and-tomcat/src/main/resources/postgres-xa-ds.xml"&gt;ds.xml&lt;/a&gt; which defines connecion properties and jndi name binding &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/jbosstm/quickstart/blob/5.8.1.Final/jca-and-tomcat/src/main/resources/transaction.xml"&gt;transaction.xml&lt;/a&gt; which configures transaction manager instead of use of the &lt;code&gt;jbossts-properties.xml&lt;/code&gt;. &lt;/li&gt; &lt;/ul&gt; Check more configuration in &lt;a href="http://www.ironjacamar.org/doc/userguide/1.2/en-US/html_single/index.html"&gt;IronJacamar documentation&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Summary:&lt;/b&gt; IronJacamar is started as embedded system and process all the handling on its own. Developer needs to provide xml descriptor to set up. &lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt; This article provides the details about configuration of the Narayana when used in Apache Tomcat container. We've seen the three possible libraries to get the integration working - the Narayana JDBC transactional driver, Apache DBCP2 library and IronJacamar JCA implementation.&lt;br/&gt; On top of it, the article contains many details about Narayana and Tomcat resource configuration. &lt;/p&gt; &lt;p&gt;If you hesitate what alternative is the best fit for your project then this table can help you &lt;table border="1" style="border-collapse: collapse; width: 100%; border: 1px solid #dddddd; text-align: left; padding: 8px;"&gt; &lt;tr style="background-color: #dddddd;"&gt; &lt;th width="180"&gt;JDBC integration library&lt;/th&gt; &lt;th&gt;When to use&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Apache DBCP2&lt;/td&gt; &lt;td&gt;It's the recommended option when you want to obtain Narayana transaction handling in the Apache Tomcat Integration is done in the Narayana resource factory which ensures easily setting up the datasource and recovery in the one step. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Narayana transactional jdbc driver&lt;/td&gt; &lt;td&gt;Is good fit when you want to have all parts integrated and covered by Narayana project. It provides lightweight JDBC pooling layer that could be nice for small projects. Integration requires a little bit more hand working. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;IronJacamar&lt;/td&gt; &lt;td&gt;To be used when you need whole JCA functionality running in Apache Tomcat. The benefit of this solution is the battle tested integration of Narayana and IronJacamar as they are delivered as one pack in the WildFly application server. &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cov_oZNFoDg" height="1" width="1" alt=""/&gt;</content><summary>Narayana implements JTA specification in Java. It's flexible and easy to be integrated to any system which desires transaction capabilities. As proof of the Narayana extensibility check our quickstarts like Spring Boot one or Camel one. But this blogpost is different integration effort. It talks in details about Narayana integration with Apache Tomcat server. If you do not care about details then ...</summary><dc:creator>Ondřej Chaloupka</dc:creator><dc:date>2018-05-21T22:16:00Z</dc:date><feedburner:origLink>http://jbossts.blogspot.com/2018/05/narayana-jdbc-integration-for-tomcat.html</feedburner:origLink></entry><entry><title>Red Hat Summit: Lowering the risk of monolith to microservices</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fz4rA-JfAIc/" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Red Hat Summit" /><category term="enterprise architecture" /><category term="microservices" /><category term="modernization" /><category term="red hat summit" /><category term="Red Hat Summit 2018" /><author><name>Doug Tidwell</name></author><id>https://developers.redhat.com/blog/?p=495397</id><updated>2018-05-21T17:57:33Z</updated><published>2018-05-21T17:57:33Z</published><content type="html">&lt;p&gt;Christian Posta, Chief Architect at Red Hat, presented the story of a fictitious company&lt;sup&gt;1&lt;/sup&gt; moving a monolithic application to microservices.&lt;/p&gt; &lt;p&gt;When considering risk, we think we know the bad things that can happen and the probabilities of those bad things actually happening. Christian defines a &lt;em&gt;monolith&lt;/em&gt; as a large application developed over many years by different teams that delivers proven business value while being very difficult to update and maintain. Its architecture, elegant at one point, has eroded over time. That makes it difficult to assess the risk of migrating a monolith.&lt;span id="more-495397"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s hear from the new school:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Microservice&lt;/em&gt; is a highly distracting word that serves to confuse developers, architects, and IT leaders into believing that we can actually have a utopian application architecture.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Um, no. While that&amp;#8217;s cynical but true, the correct definition is:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Microservices&lt;/em&gt; are an &lt;em&gt;architectural optimization&lt;/em&gt; that treats the modules of an application as independently owned and deployed services for the purpose of increasing an organization&amp;#8217;s velocity and eliminating &lt;a href="https://en.wikipedia.org/wiki/Technical_debt"&gt;technical debt&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;The performance of an IT organization has a strong correlation to business performance, boosting productivity, profitability, and market share&lt;sup&gt;2&lt;/sup&gt;. Statistics over the last few years for high performers versus low performers include moving code from commit to production &lt;em&gt;200x faster&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt;, deployments being &lt;em&gt;46x more frequent&lt;/em&gt;, and the lead time for changes being &lt;em&gt;440x faster&lt;/em&gt;&lt;sup&gt;4&lt;/sup&gt;. Technologies and techniques such as containers, automated testing, and deployment pipelines enable teams to go faster. In addition, high-performing teams are introducing errors at a much lower rate and are recovering from the errors they do create at a much higher rate.&lt;/p&gt; &lt;p&gt;When considering microservices, the goal is not to pursue a microservice architecture mindlessly. The goal is to use microservices where they make sense. Specifically, to use microservices to speed up development, to lower the risk of bad things happening, and to make it simpler to understand and recover from bad things when they happen. (Which, of course, they probably will.)&lt;/p&gt; &lt;p&gt;The case study Christian covered is the &lt;a href="https://developers.redhat.com/ticket-monster/"&gt;TicketMonster demo&lt;/a&gt;. Originally written for JBoss, the code has been around for at least a decade and has become, in Christian&amp;#8217;s words, &amp;#8220;a morass of stuff.&amp;#8221; Maintaining this or any other monolith is a major pain for a long list of reasons:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Making changes in one place negatively affects unrelated areas&lt;/li&gt; &lt;li&gt;We have low confidence that reasonable changes won&amp;#8217;t break something somewhere else&lt;/li&gt; &lt;li&gt;We spend lots of time coordinating work among team members&lt;/li&gt; &lt;li&gt;The structure of the application has eroded or is non-existent&lt;/li&gt; &lt;li&gt;We have no way to quantify how long code merges will take&lt;/li&gt; &lt;li&gt;Development is tedious because the project is so big (the IDE bogs down, running tests take forever, bootstrap times are long, etc.)&lt;/li&gt; &lt;li&gt;Changes to one module force changes across other modules&lt;/li&gt; &lt;li&gt;Sunsetting outdated technology is difficult&lt;/li&gt; &lt;li&gt;We may have to base new applications on old approaches like batch processing&lt;/li&gt; &lt;li&gt;The monolith gets in its own way when managing resources, allocations, and computations.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All of these factors make microservices attractive. But it&amp;#8217;s important to remember that &lt;em&gt;microservices are about optimizing for speed&lt;/em&gt;. You need to ask yourself the question, &amp;#8220;Is the architecture of our application the bottleneck that keeps us from moving faster?&amp;#8221; If it&amp;#8217;s not, Christian prescribes a three-step process:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Figure out what &lt;em&gt;is&lt;/em&gt; keeping you from moving faster.&lt;/li&gt; &lt;li&gt;Fix that.&lt;/li&gt; &lt;li&gt;Come back and look at microservices again.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If microservices are a good fit for you, the question is how to break a monolith into microservices. Some common approaches include, &amp;#8220;Do one thing and do it well,&amp;#8221; &amp;#8220;Organize around verbs,&amp;#8221; &amp;#8220;Organize around nouns,&amp;#8221; and &amp;#8220;Focus on products not projects.&amp;#8221; We said similar things about SOA back in the day, however. &amp;#8220;Services are autonomous,&amp;#8221; &amp;#8220;Loose coupling is vital,&amp;#8221; &amp;#8220;Boundaries are explicit,&amp;#8221; were equally high-minded goals that often eluded us. So we have platitudes on what the system should be, but no real guidelines on how to make it happen. A more sophisticated approach:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Identify modules and boundaries (&lt;em&gt;aka&lt;/em&gt; use &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design"&gt;domain-driven design&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Align to business capabilities&lt;/li&gt; &lt;li&gt;Identify data entities responsible for features and modules&lt;/li&gt; &lt;li&gt;Break out those entities and wrap them with APIs or services&lt;/li&gt; &lt;li&gt;Update old code to call the new APIs&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;That&amp;#8217;s all well and good, but it misses a lot of detail&lt;sup&gt;5&lt;/sup&gt;. As usual, reality rears its ugly, pointy little head, presenting difficult problems that can&amp;#8217;t be waved away:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;It&amp;#8217;s not easy to modularize a monolith. If it were, the teams that maintained the monolith over the years would have kept it modular.&lt;/li&gt; &lt;li&gt;There are often tight couplings and integrity constraints with an SQL database. This is often overlooked. The database backing the monolith probably has normalized tables and referential integrity in place. Disregarding that can be disastrous. (In fact, it almost certainly will be disastrous.)&lt;/li&gt; &lt;li&gt;It&amp;#8217;s difficult to understand which modules use which tables in the database.&lt;/li&gt; &lt;li&gt;As appealing as it might be, we can&amp;#8217;t shut down the enterprise to do migrations.&lt;/li&gt; &lt;li&gt;There will be some ugly migration steps that can&amp;#8217;t be wished away. You&amp;#8217;ll have to undo the existing technical debt accrued over the years.&lt;/li&gt; &lt;li&gt;Finally, there is probably a point of diminishing returns at which it simply doesn&amp;#8217;t make sense to break any more things out of the monolith&lt;sup&gt;6&lt;/sup&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Yet another list—you need to make sure that these things are in place:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Test coverage for the existing project&lt;sup&gt;7&lt;/sup&gt; (consider &lt;a href="http://arquillian.org"&gt;Arquillian&lt;/a&gt; for integration testing. Also consider Michael Feathers&amp;#8217; book &lt;a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"&gt;Working Effectively with Legacy Code&lt;/a&gt;.)&lt;/li&gt; &lt;li&gt;Some level of monitoring to detect issues, exceptions, etc.&lt;/li&gt; &lt;li&gt;Some level of black-box system tests and load testing in place (&lt;a href="http://jmeter.apache.org"&gt;JMeter&lt;/a&gt; and &lt;a href="https://gatling.io"&gt;Gatling&lt;/a&gt; can help here)&lt;/li&gt; &lt;li&gt;The ability to deploy to an environment reliably (OpenShift or Kubernetes)&lt;/li&gt; &lt;li&gt;Some kind of CI/CD pipeline to make changes economical&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Moving on to the sample monolith&amp;#8230;the Ticket Monster code has the UI baked in to it. If possible, a good first step is to break the UI out of the monolith. That gives you the freedom to bring the UI into the modern era, and it also sets the stage for the separation of concerns that is promised by a microservices architecture. Start by making a copy of the UI code separate from the monolith by taking out all the JavaScript, CSS, etc. The new UI simply calls the back-end systems of the monolith. You can then do a dark launch or a canary deployment of the new UI, sending only some production traffic to it as you verify that the new UI is functionally equivalent to the original.&lt;/p&gt; &lt;p&gt;With that in mind, Christian stressed the difference between deployments and releases. A &lt;em&gt;deployment&lt;/em&gt; is simply code that lives on a production server but doesn&amp;#8217;t get any traffic. It isn&amp;#8217;t considered a &lt;em&gt;release&lt;/em&gt; until it&amp;#8217;s using live data in a production environment. A deployment should be a non-event to the business. Developers should be able to deploy code without approvals or intervention by administrators or the ops staff. Deciding to route production traffic to the deployment, on the other hand, is a business decision made once the deployment has been tested thoroughly.&lt;/p&gt; &lt;p&gt;The &lt;a href="http://istio.io"&gt;Istio service mesh&lt;/a&gt; makes this easy in an OpenShift / Kubernetes environment. It is an infrastructure that allows you to separate deployments and releases. (Read Don Schenck’s excellent &lt;a href="https://developers.redhat.com/blog/2018/03/06/introduction-istio-makes-mesh-things/"&gt;Introduction to Istio blog series&lt;/a&gt; to fully understand this technology.) Istio lets you say that only 1% of the traffic should go to the new deployment or that only users who have certain characteristics should see the new deployment. Another definition:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;A &lt;em&gt;service mesh&lt;/em&gt; is a decentralized application networking infrastructure among your services that provides resiliency, security, observability, and routing control. A service mesh is comprised of a control plane and a data plane.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Istio works via &lt;em&gt;sidecar proxies&lt;/em&gt;. Every service in the service mesh has a proxy beside it. Any traffic meant for a service first goes to the sidecar proxy. Istio controls the sidecar proxy to determine how or when or if that traffic is actually delivered to the service. This approach allows you to manage all the microservices in your service mesh without changing any code..&lt;/p&gt; &lt;p&gt;Continuing the refactoring of the monolith, we can take a particular function of the monolith and move that code into a service. The starting point, once again, is to copy the code from the monolith and put it into a separate module. Then we can use Istio to route only some of the traffic to the new service. To maximize the value of our investment, the service we choose should be something that provides significant business value. In other words, we look at the monolith and determine that some part of the system could give us a substantial ROI if we made it more agile and flexible. In the Ticket Monster example, the order processing functions could be far more valuable to the business if they were in a separate module that could be enhanced independently of the monolith. For example, if that code was written a decade ago, it doesn&amp;#8217;t support things like ApplePay or Venmo. A low-risk architecture for adding new methods of payment would clearly help the business stay current.&lt;/p&gt; &lt;p&gt;To sum up:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Write lots of tests. For the monolith if you can, but definitely for the new services.&lt;/li&gt; &lt;li&gt;Use advanced techniques such as canary deployments and other fine-grained traffic control to manage the transition from deployments to releases.&lt;/li&gt; &lt;li&gt;Reduce boilerplate code for data integration in the initial service implementation.&lt;/li&gt; &lt;li&gt;Use technical debt to your advantage.&lt;/li&gt; &lt;li&gt;Have lots of monitoring in place.&lt;/li&gt; &lt;li&gt;Leverage your deployment and release infrastructure to experiment and learn about your system as you go forward.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This was a great session with lots of practical advice based on real-world experience. If you&amp;#8217;d like to get it from the source, the &lt;a href="https://youtu.be/YP6wJXblyWM"&gt;video of Christian&amp;#8217;s presentation&lt;/a&gt; is one of the &lt;a href="https://developers.redhat.com/blog/2018/05/15/100-red-hat-summit-2018-session-videos-online/"&gt;100+ Red Hat Summit 2018 breakout sessions&lt;/a&gt; you can view online for free.&lt;/p&gt; &lt;div align="center"&gt;&lt;iframe src="https://www.youtube.com/embed/YP6wJXblyWM" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start"&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/div&gt; &lt;p&gt;Good luck with your enterprise modernization!&lt;/p&gt; &lt;p&gt;Learn more about &lt;strong&gt;&lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices architecture&lt;/a&gt; &lt;/strong&gt;on developers.redhat.com.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.slideshare.net/ceposta/lowering-the-risk-of-monolith-to-microservices"&gt;Christian&amp;#8217;s slides for this presentation on SlideShare&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Christian and Burr Sutter&amp;#8217;s new book: &lt;a href="https://developers.redhat.com/books/introducing-istio-service-mesh-microservices/"&gt;Introducing Istio Service Mesh for Microservices&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Christian&amp;#8217;s book: &lt;a href="https://developers.redhat.com/books/microservices-java-developers-hands-introduction-frameworks-and-containers/"&gt;Microservices for Java Developers: A Hands-on Introduction to Frameworks and Containers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/author/ceposta/"&gt;Christian&amp;#8217;s articles&lt;/a&gt; on &lt;a href="https://developers.redhat.com/blog/"&gt;developers.redhat.com/blog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;strong&gt;Footnotes:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Fictitious, but based on a true story. Many of them, in fact.&lt;/li&gt; &lt;li&gt;See &lt;a href="https://puppet.com/resources/whitepaper/2014-state-devops-report"&gt;Puppet.com: 2014 State of DevOps report&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;See &lt;a href="https://puppet.com/resources/whitepaper/2015-state-devops-report"&gt;Puppet.com: 2015 State of DevOps report&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;See &lt;a href="https://puppet.com/resources/whitepaper/2017-state-devops-report"&gt;Puppet.com: 2017 State of DevOps report&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;What, you were expecting a full, prescriptive recommendation from a blog post? Sorry, but the real world is more complicated than that.&lt;/li&gt; &lt;li&gt;You can stab it with your steely knives, but you just can&amp;#8217;t kill the beast.&lt;/li&gt; &lt;li&gt;One definition of legacy code is &amp;#8220;code that doesn&amp;#8217;t have any tests.&amp;#8221;’&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fred-hat-summit-lowering-the-risk-of-monolith-to-microservices%2F&amp;#38;title=Red%20Hat%20Summit%3A%20Lowering%20the%20risk%20of%20monolith%20to%20microservices" data-a2a-url="https://developers.redhat.com/blog/2018/05/21/red-hat-summit-lowering-the-risk-of-monolith-to-microservices/" data-a2a-title="Red Hat Summit: Lowering the risk of monolith to microservices"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/21/red-hat-summit-lowering-the-risk-of-monolith-to-microservices/"&gt;Red Hat Summit: Lowering the risk of monolith to microservices&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fz4rA-JfAIc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Christian Posta, Chief Architect at Red Hat, presented the story of a fictitious company1 moving a monolithic application to microservices. When considering risk, we think we know the bad things that can happen and the probabilities of those bad things actually happening. Christian defines a monolith as a large application developed over many years by [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/21/red-hat-summit-lowering-the-risk-of-monolith-to-microservices/"&gt;Red Hat Summit: Lowering the risk of monolith to microservices&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/05/21/red-hat-summit-lowering-the-risk-of-monolith-to-microservices/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">495397</post-id><dc:creator>Doug Tidwell</dc:creator><dc:date>2018-05-21T17:57:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/05/21/red-hat-summit-lowering-the-risk-of-monolith-to-microservices/</feedburner:origLink></entry><entry><title>Apache Camel URI completion: easy installation for Eclipse, VS Code, and OpenShift.io</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GTWE1fg4ESg/" /><category term="Developer Tools" /><category term="JBoss Fuse" /><category term="Red Hat OpenShift.io" /><category term="apache camel" /><category term="Eclipse" /><category term="Fuse" /><category term="Fuse Tooling" /><category term="IDE" /><category term="language servers" /><category term="OpenShift.io" /><category term="Red Hat Fuse" /><category term="VS Code" /><author><name>Aurélien Pupier</name></author><id>https://developers.redhat.com/blog/?p=494857</id><updated>2018-05-21T11:00:34Z</updated><published>2018-05-21T11:00:34Z</published><content type="html">&lt;p&gt;Discoverability and ease of installation of Apache Camel tooling based on the Language Server Protocol has been improved. Manual download and installation of binaries is no longer necessary!  For the Eclipse desktop IDE and the VS Code environment you can now find and install the Camel tooling directly from the marketplaces for each development environment.&lt;/p&gt; &lt;p&gt;Camel Language Server is now also available in &lt;a href="http://openshift.io/"&gt;Red Hat OpenShift.io!&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In this article, I will show you how you can install Camel tooling via the marketplaces for Eclipse and VS Code.  I will also show how to enable Camel tooling in your OpenShift.io workspace.&lt;span id="more-494857"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Eclipse and VS Code Marketplaces&lt;/h2&gt; &lt;p&gt;The Camel tooling is available on the &lt;a href="https://marketplace.eclipse.org/content/apache-camel-language-server"&gt;Eclipse marketplace&lt;/a&gt;. This means that you can discover and install it directly from your &lt;a href="https://www.eclipse.org/ide/"&gt;Eclipse Desktop IDE&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-494867 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/EclipseSearchCamel.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/EclipseSearchCamel.png" alt="Language Support for Apache Camel extension entry displayed when searching for Camel in Eclipse Marketplace" width="811" height="951" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/EclipseSearchCamel.png 811w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/EclipseSearchCamel-256x300.png 256w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/EclipseSearchCamel-768x901.png 768w" sizes="(max-width: 811px) 100vw, 811px" /&gt;&lt;/p&gt; &lt;p&gt;The tooling is also available on &lt;a href="https://marketplace.visualstudio.com/items?itemName=camel-tooling.vscode-apache-camel"&gt;VS Code marketplace&lt;/a&gt;. This means that you can discover and install it directly from your &lt;a href="https://code.visualstudio.com/"&gt;VS Code IDE&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-494877 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/VSCodeSearchCamel-1024x639.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/VSCodeSearchCamel.png" alt="Language Support for Apache Camel extension entry displayed when searching for Camel in VS Code Extension manager" width="1086" height="678" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/VSCodeSearchCamel.png 1086w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/VSCodeSearchCamel-300x187.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/VSCodeSearchCamel-768x479.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/VSCodeSearchCamel-1024x639.png 1024w" sizes="(max-width: 1086px) 100vw, 1086px" /&gt;&lt;/p&gt; &lt;h2&gt;Use in OpenShift.io&lt;/h2&gt; &lt;p&gt;Camel Language Server is now also available in &lt;a href="http://openshift.io/"&gt;OpenShift.io!&lt;/a&gt; It requires a workspace configuration to be turned on.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Go to your workspace&lt;br /&gt; &lt;img class=" aligncenter wp-image-494957 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/1-openShiftIOWorkspace-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/1-openShiftIOWorkspace.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/1-openShiftIOWorkspace.png 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/1-openShiftIOWorkspace-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/1-openShiftIOWorkspace-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/1-openShiftIOWorkspace-1024x555.png 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/li&gt; &lt;li&gt;Click on the yellow top left arrow&lt;img class=" aligncenter wp-image-494967 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/2-openShiftIOWorkspacePanel-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/2-openShiftIOWorkspacePanel.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/2-openShiftIOWorkspacePanel.png 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/2-openShiftIOWorkspacePanel-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/2-openShiftIOWorkspacePanel-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/2-openShiftIOWorkspacePanel-1024x555.png 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/li&gt; &lt;li&gt;Click on &amp;#8220;Workspaces&amp;#8221;&lt;img class=" aligncenter wp-image-494977 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/3-openShiftIOWorkspaces-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/3-openShiftIOWorkspaces.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/3-openShiftIOWorkspaces.png 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/3-openShiftIOWorkspaces-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/3-openShiftIOWorkspaces-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/3-openShiftIOWorkspaces-1024x555.png 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/li&gt; &lt;li&gt;Click on the &amp;#8220;configuration icon corresponding to your workspace&lt;img class=" aligncenter wp-image-494987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/4-openShiftIOConfigurationWorkspace-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/4-openShiftIOConfigurationWorkspace.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/4-openShiftIOConfigurationWorkspace.png 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/4-openShiftIOConfigurationWorkspace-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/4-openShiftIOConfigurationWorkspace-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/4-openShiftIOConfigurationWorkspace-1024x555.png 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/li&gt; &lt;li&gt;Click on &amp;#8220;Installers&amp;#8221; menu and turn on &amp;#8220;Apache Camel language server&lt;img class=" aligncenter wp-image-494997 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/5-turnOnCamelLanguageServer-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/5-turnOnCamelLanguageServer.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/5-turnOnCamelLanguageServer.png 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/5-turnOnCamelLanguageServer-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/5-turnOnCamelLanguageServer-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/5-turnOnCamelLanguageServer-1024x555.png 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/li&gt; &lt;li&gt;Apply and open the workspace&lt;/li&gt; &lt;li&gt;Reopen the xml file&lt;/li&gt; &lt;li&gt;Enjoy!&lt;br /&gt; &lt;img class=" aligncenter wp-image-495007 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/completionOpenShift.io_-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/completionOpenShift.io_.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/completionOpenShift.io_.png 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/completionOpenShift.io_-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/completionOpenShift.io_-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/completionOpenShift.io_-1024x555.png 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;New home for project code&lt;/h2&gt; &lt;p&gt;Please note that the Camel Language Server has a new home. It is now co-hosted with the &lt;a href="https://github.com/camel-tooling/camel-idea-plugin"&gt;Camel Idea plugin&lt;/a&gt;. You can find it here: &lt;a href="https://github.com/camel-tooling/camel-language-server"&gt;github.com/camel-tooling/camel-language-server&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now that it is easily installable, it is time to give it a try!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;linkname=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F21%2Fapache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io%2F&amp;#38;title=Apache%20Camel%20URI%20completion%3A%20easy%20installation%20for%20Eclipse%2C%20VS%20Code%2C%20and%20OpenShift.io" data-a2a-url="https://developers.redhat.com/blog/2018/05/21/apache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io/" data-a2a-title="Apache Camel URI completion: easy installation for Eclipse, VS Code, and OpenShift.io"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/21/apache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io/"&gt;Apache Camel URI completion: easy installation for Eclipse, VS Code, and OpenShift.io&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GTWE1fg4ESg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Discoverability and ease of installation of Apache Camel tooling based on the Language Server Protocol has been improved. Manual download and installation of binaries is no longer necessary!  For the Eclipse desktop IDE and the VS Code environment you can now find and install the Camel tooling directly from the marketplaces for each development environment. Camel [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/21/apache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io/"&gt;Apache Camel URI completion: easy installation for Eclipse, VS Code, and OpenShift.io&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/05/21/apache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">494857</post-id><dc:creator>Aurélien Pupier</dc:creator><dc:date>2018-05-21T11:00:34Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/05/21/apache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io/</feedburner:origLink></entry><entry><title>Contract Net Protocol with jBPM</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JD6HGzap7OE/contract-net-protocol-with-jbpm.html" /><category term="case_management" scheme="searchisko:content:tags" /><category term="contract_net" scheme="searchisko:content:tags" /><category term="contract_net_protocol" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><category term="jbpm7" scheme="searchisko:content:tags" /><author><name>Maciej Swiderski</name></author><id>searchisko:content:id:jbossorg_blog-contract_net_protocol_with_jbpm</id><updated>2018-05-21T10:08:38Z</updated><published>2018-05-21T09:25:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;jBPM provides lots of capabilities that could be used out of the box to build rather sophisticated solutions. In this article I'd like to show one of them - &lt;a href="https://en.wikipedia.org/wiki/Contract_Net_Protocol"&gt;Contract Net Protocol&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Contract Net Protocol (CNP) is a task-sharing protocol in multi-agent systems, consisting of a collection of nodes or software agents that form the 'contract net'. Each node on the network can, at different times or for different tasks, be a manager or a contractor.&lt;/i&gt; [1]&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This concepts nicely fits into case management capabilities of jBPM 7. It allows to easily model interaction between Initiator and Participant(s).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-A2afY42VoYk/WwKHw1qALLI/AAAAAAAABcg/frKuLQWY9c8c_sAM6w9uU5fB1kDDnLkGQCLcBGAs/s1600/image001.gif.jpeg" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="477" data-original-width="348" height="640" src="https://1.bp.blogspot.com/-A2afY42VoYk/WwKHw1qALLI/AAAAAAAABcg/frKuLQWY9c8c_sAM6w9uU5fB1kDDnLkGQCLcBGAs/s640/image001.gif.jpeg" width="466" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;source&amp;nbsp;http://www.fipa.org/specs/fipa00029/SC00029H.html#_ftnref1&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;Contract can be announced to many participants (aka bidders) that can either be interested in the contract and then bid or simply reject it and leave the contract net completely.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;with jBPM 7, contract net can be modelled as a case definition where individual phases of the protocol can be externalised to processes to carry on with additional work. This improves readability and at the same time promotes reusability of the implementation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-1tlhyUC8e5s/WwKIuV7rhAI/AAAAAAAABco/jAL2m5Sts58hhZnmjezZ__gHw_B0nN6dwCLcBGAs/s1600/Screen%2BShot%2B2018-05-21%2Bat%2B10.51.46.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="893" data-original-width="1600" height="356" src="https://4.bp.blogspot.com/-1tlhyUC8e5s/WwKIuV7rhAI/AAAAAAAABco/jAL2m5Sts58hhZnmjezZ__gHw_B0nN6dwCLcBGAs/s640/Screen%2BShot%2B2018-05-21%2Bat%2B10.51.46.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Announce contract and Offer contract are separate processes that can be implemented separately according to needs. For this basic showcase they are based on human decision and look as follows&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-ucI_W_1IR5w/WwKJHNOdNrI/AAAAAAAABc0/WQXBoD4HIS8SoPNjjvz0VuDeqZUjtb_hwCLcBGAs/s1600/Screen%2BShot%2B2018-05-21%2Bat%2B10.53.32.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="672" data-original-width="1268" height="338" src="https://1.bp.blogspot.com/-ucI_W_1IR5w/WwKJHNOdNrI/AAAAAAAABc0/WQXBoD4HIS8SoPNjjvz0VuDeqZUjtb_hwCLcBGAs/s640/Screen%2BShot%2B2018-05-21%2Bat%2B10.53.32.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Each of the participants of the contract net will have dedicated instance of the announce contract process. Each should make the decision if they will place a bid or not. In case they won't do it at all, main contract net case definition keeps a timer event on them to remove given bidder if the deadline was reached.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As soon as all bidders replied (or time for reply elapsed) there are set of business rules that will evaluate all provided bids and select only one. Once it is selected an Offer contract subprocess will be initiated - after milestone of selecting a bid is completed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-luo3cbMmVus/WwKM0xTZFYI/AAAAAAAABdA/uKpuMHwogDoO19iExbRNFWZGyHRWsnrggCLcBGAs/s1600/Screen%2BShot%2B2018-05-21%2Bat%2B11.09.23.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="718" data-original-width="1260" height="364" src="https://3.bp.blogspot.com/-luo3cbMmVus/WwKM0xTZFYI/AAAAAAAABdA/uKpuMHwogDoO19iExbRNFWZGyHRWsnrggCLcBGAs/s640/Screen%2BShot%2B2018-05-21%2Bat%2B11.09.23.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So the bidder who placed the selected bid will get the "Work on contract" task assigned to actually perform the work. Once done the worker indicates if the work was done or she failed at doing the work. In case of successful completion of the work additional business rules are invoked to verify it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Completion of the work (assuming it was done) will show the results of the work to the initiator for final verification. Once the results are reviewed the contract is ended - by that case instance is ready to be closed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All this in action can be seen in the following screencast&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/vau8bxAZYQ0" width="560"&gt;&lt;/iframe&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Again, this is just basic implementation but shows the potential that can be unleashed to build advanced Contract Net Protocol solutions.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Complete project that can be easily imported into workbench and executed in KIE server can be found &lt;a href="https://github.com/mswiderski/contract-net-example"&gt;here&lt;/a&gt;.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;To start the case instance you can use following payload that includes data (both contract and bidders) and case role assignments&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;{&lt;br /&gt; "case-data": &lt;br /&gt; {&lt;br /&gt; "contract": &lt;br /&gt; {&lt;br /&gt; "Contract": &lt;br /&gt; {&lt;br /&gt; "name" : "jBPM contract",&lt;br /&gt; "description" : "provide development expertise for jBPM project",&lt;br /&gt; "price" : 1234.40&lt;br /&gt; }&lt;br /&gt; },&lt;br /&gt; "bidders": [&lt;br /&gt; {&lt;br /&gt; "Bidder": &lt;br /&gt; {&lt;br /&gt; "id" : "maciek",&lt;br /&gt; "name" : "Maciej Swiderski",&lt;br /&gt; "email" : "maciek@email.com" &lt;br /&gt; }&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; "Bidder": &lt;br /&gt; {&lt;br /&gt; "id" : "john",&lt;br /&gt; "name" : "John doe",&lt;br /&gt; "email" : "john@email.com" &lt;br /&gt; }&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; },&lt;br /&gt;&lt;br /&gt; "case-user-assignments": &lt;br /&gt; {&lt;br /&gt; "Initiator": "mary",&lt;br /&gt; "Participant": "john"&lt;br /&gt; },&lt;br /&gt;&lt;br /&gt; "case-group-assignments": &lt;br /&gt; {&lt;br /&gt; &lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;If you need more bidders just add them by copying the single bidder in the payload&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;[1] Source - https://en.wikipedia.org/wiki/Contract_Net_Protocol&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JD6HGzap7OE" height="1" width="1" alt=""/&gt;</content><summary>jBPM provides lots of capabilities that could be used out of the box to build rather sophisticated solutions. In this article I'd like to show one of them - Contract Net Protocol. Contract Net Protocol (CNP) is a task-sharing protocol in multi-agent systems, consisting of a collection of nodes or software agents that form the 'contract net'. Each node on the network can, at different times or for ...</summary><dc:creator>Maciej Swiderski</dc:creator><dc:date>2018-05-21T09:25:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/05/contract-net-protocol-with-jbpm.html</feedburner:origLink></entry><entry><title>Get a Signed Copy of Effective Business Process Management with JBoss BPM</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/P_kEC_QYBEg/get-a-signed-copy-of-effective-business-process-management-with-jboss-bpm.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="bpmPaaS" scheme="searchisko:content:tags" /><category term="BRMS" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="jBPMMigration" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Publishing" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-get_a_signed_copy_of_effective_business_process_management_with_jboss_bpm</id><updated>2018-05-21T05:00:09Z</updated><published>2018-05-21T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-kfTesgjhk60/Wv7Bh9n8gaI/AAAAAAAAsqY/pbHNxQCD9yErdvRrbQx-D8nzWjHizOMkwCLcBGAs/s1600/IMG_9982.JPG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="effective business process management with jboss bpm" border="0" data-original-height="1600" data-original-width="900" height="200" src="https://1.bp.blogspot.com/-kfTesgjhk60/Wv7Bh9n8gaI/AAAAAAAAsqY/pbHNxQCD9yErdvRrbQx-D8nzWjHizOMkwCLcBGAs/s200/IMG_9982.JPG" title="" width="112" /&gt;&lt;/a&gt;&lt;/div&gt;As &lt;a href="http://www.schabell.org/2018/04/book-signing-effective-bpm-with-jboss-bpm.html" target="_blank"&gt;mentioned previously&lt;/a&gt;, a few weeks ago in San Francisco, CA I spent some time signing copies of my book &lt;a href="https://developers.redhat.com/books/effective-business-process-management-jboss-bpm/?sc_cid=701f2000000tz4AAAQ" target="_blank"&gt;Effective Business Process Management with JBoss BPM&lt;/a&gt; for attendees of the &lt;a href="https://www.redhat.com/en/summit/2018?sc_cid=701f2000000tutSAAQ" target="_blank"&gt;Red Hat Summit&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Since the book was launched as a free ebook download on &lt;a href="https://developers.redhat.com/books/effective-business-process-management-jboss-bpm/?sc_cid=701f2000000tz4AAAQ" target="_blank"&gt;Red Hat Developers&lt;/a&gt;, it was not really possible to get your hands on a real paper copy of the book.&lt;br /&gt;&lt;br /&gt;Until now.&lt;br /&gt;&lt;br /&gt;With over 200 put in print for Red Hat Summit, it was amazing to see the lines of people wanting to meet, greet and obtain their signed copies.&lt;br /&gt;&lt;br /&gt;If you would like to receive a copy, possibly signed by me, read further.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://1.bp.blogspot.com/-ih_789OK1cM/WqEPoyQVptI/AAAAAAAAr7k/-FobkkL2a8Iv295xSqvKaUEatf2j1LxfwCPcBGAYYCw/s1600/Schabell_JBoss_front1.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="effective business process management with jboss bpm" border="0" data-original-height="547" data-original-width="433" height="200" src="https://1.bp.blogspot.com/-ih_789OK1cM/WqEPoyQVptI/AAAAAAAAr7k/-FobkkL2a8Iv295xSqvKaUEatf2j1LxfwCPcBGAYYCw/s200/Schabell_JBoss_front1.png" title="" width="158" /&gt;&lt;/a&gt;Share your JBoss BPM story&lt;/h3&gt;It was wonderful to meet people from all across the globe. Just off the top of my head, I spoke with readers and JBoss BPM Suite fans from the UK, Australia, India, Japan, China, Canada, Mexico, Peru, Uruguay, Brazil and South Africa.&lt;br /&gt;&lt;br /&gt;There might have been more, but after two signing sessions of an hour, my mind was whirling from all the friends, colleagues, customers and partners that attended the signing table.&lt;br /&gt;&lt;br /&gt;I left the Red Hat Developers team with a few books pre-signed for their next event and they were kind enough to send me home with a small box of the book.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://3.bp.blogspot.com/-cE_AwmnOPeI/Wv7BwOjdCQI/AAAAAAAAsqc/krGUibUNhvs6lmrXj70YWaUkKWGJATs8QCLcBGAs/s1600/IMG_9981.JPG" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="effective business process management with jboss bpm" border="0" data-original-height="1600" data-original-width="1200" height="200" src="https://3.bp.blogspot.com/-cE_AwmnOPeI/Wv7BwOjdCQI/AAAAAAAAsqc/krGUibUNhvs6lmrXj70YWaUkKWGJATs8QCLcBGAs/s200/IMG_9981.JPG" title="" width="150" /&gt;&lt;/a&gt;If you would like a free paper book copy, possibly signed by me the author, then here's what you have to do.&lt;br /&gt;&lt;br /&gt;Share your JBoss BPM story in a comments section of this post and let me know by &lt;a href="https://twitter.com/ericschabell" target="_blank"&gt;contacting me through my Twitter account&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I'll be in touch about finding how to get a copy of the book, while the limited supply lasts, to you!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Ia3YRhyx4jQ:8Sq0E4ixWEs:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Ia3YRhyx4jQ:8Sq0E4ixWEs:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Ia3YRhyx4jQ:8Sq0E4ixWEs:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Ia3YRhyx4jQ:8Sq0E4ixWEs:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Ia3YRhyx4jQ:8Sq0E4ixWEs:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/Ia3YRhyx4jQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/P_kEC_QYBEg" height="1" width="1" alt=""/&gt;</content><summary>As mentioned previously, a few weeks ago in San Francisco, CA I spent some time signing copies of my book Effective Business Process Management with JBoss BPM for attendees of the Red Hat Summit. Since the book was launched as a free ebook download on Red Hat Developers, it was not really possible to get your hands on a real paper copy of the book. Until now. With over 200 put in print for Red Hat...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-05-21T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Ia3YRhyx4jQ/get-a-signed-copy-of-effective-business-process-management-with-jboss-bpm.html</feedburner:origLink></entry><entry><title>Red Hat Summit: An Eventful Tour from Enterprise Integration to Serverless</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3w-cg_s4g0k/" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Red Hat Summit" /><category term="Serverless" /><category term="Design Patterns" /><category term="domain-driven design" /><category term="event-driven architecture" /><category term="FaaS" /><category term="Functions-as-a-Service" /><category term="Integration" /><category term="microservices" /><category term="red hat summit" /><category term="Red Hat Summit 2018" /><author><name>Doug Tidwell</name></author><id>https://developers.redhat.com/blog/?p=494797</id><updated>2018-05-18T11:00:22Z</updated><published>2018-05-18T11:00:22Z</published><content type="html">&lt;p&gt;Red Hat Senior Architects Marius Bogoevici and Christian Posta recently presented an overview of event-driven architecture, taking the audience from the basics of enterprise integration to microservices and serverless computing. Standing in front of a packed room at Red Hat Summit, their talk addressed four basic points:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Event-driven architectures have been around for a while. What are they, why are they powerful, and why are back &lt;em&gt;en vogue&lt;/em&gt;?&lt;/li&gt; &lt;li&gt;Messaging is often used as a backbone for event-based distributed systems. What options do we have for cloud-native event-driven architectures?&lt;/li&gt; &lt;li&gt;Integration is necessary for any organization. How do streaming, cloud-native architectures, and microservices fit in?&lt;/li&gt; &lt;li&gt;Are Functions-as-a-Service (FaaS) the next utopian architecture? Where do functions fit in a world of microservices?&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The entire session was done with three enterprise concerns in mind. First is the divide between agile systems and purpose-built systems. While the purpose-built system is optimized for a small set of use cases, it is very difficult to change if new use cases arise or the old use cases become irrelevant. We have to be agile to adapt to a constantly changing environment. Another concern is resource utilization. We want to eliminate waste and get the most out of our systems and resources, although the cloud in general and containers in particular make more distributed architectures practical. Finally, Christian made the observation that we cannot build complex systems from complex parts. The components we develop must be as simple and understandable as possible.&lt;/p&gt; &lt;p&gt;&lt;span id="more-494797"&gt;&lt;/span&gt;Marius explained the rise of event-driven architectures by comparing them to the old client-server paradigm. The most important differences are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Client-server interactions are ephemeral and synchronous. Event-driven interactions are persistent (they can be, anyway) and asynchronous.&lt;/li&gt; &lt;li&gt;Client-server applications are tightly coupled. Event-driven applications are decoupled.&lt;/li&gt; &lt;li&gt;Client-server applications aren&amp;#8217;t easily composable. Event-driven applications are&lt;sup&gt;1&lt;/sup&gt;.&lt;/li&gt; &lt;li&gt;Client-server architectures have a simplified model (every request has a single response) and are not fault-tolerant. Event-driven architectures have a complicated model (a single event might be handled by several components) and are highly fault-tolerant.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To start with the basics, an &lt;em&gt;event&lt;/em&gt; is simply an action or occurrence that happened in the past. It is immutable, it can be persistent, and it can be shared. Types of events are notifications, state transfers &lt;em&gt;(aka &lt;/em&gt;commands&lt;em&gt;),&lt;/em&gt; event sourcing, and &lt;a href="https://martinfowler.com/bliki/CQRS.html"&gt;CQRS (Command Query Responsibllity Segregation)&lt;/a&gt;. (See &lt;a href="https://martinfowler.com/articles/201701-event-driven.html"&gt;Martin Fowler&amp;#8217;s excellent article &amp;#8220;What do you mean by &amp;#8216;Event-Driven&amp;#8217;?&amp;#8221;&lt;/a&gt; for a great discussion on the subject.)&lt;/p&gt; &lt;p&gt;In an event-driven architecture, you treat events as part of your domain model and create decoupled components that either emit or handle those events. This dovetails with the concerns of &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design"&gt;domain-driven design&lt;/a&gt;. Marius used an example of a system with four components: Orders, Billing, Shipment, and Inventory. Those components deal with the events: Order Created, Order Paid, and Order Shipped. In this simple example, the interactions among the components become obvious. When the Orders component generates an Order Created event, the other three components are affected. The order impacts the inventory on hand, the customer must be billed for the order, and the order has to be shipped. By focusing on events, the behavior of the system is easy to understand.&lt;/p&gt; &lt;p&gt;Event-driven architecture leads to more agile systems. As mentioned earlier, composability makes it straightforward to add more components to the system. In addition, if the system uses persistent events, those events are available for data mining, analytics, and machine learning. All in all, event-driven architectures are more robust and resilient, they are agile, and they make it possible for the organization to align its digital business with what actually happens in the real world.&lt;/p&gt; &lt;p&gt;Of course, if you&amp;#8217;re going to build an event-driven architecture, you have to have an infrastructure that delivers a stream of events reliably. Middleware has evolved to address this. Traditional message brokers deliver functionality such as publish/subscribe, queueing, and persistence. In that infrastructure, all of the messages flow through the broker, creating a bottleneck. This is good from the perspective of system utilization, but it limits agility. New requirements have created orders of magnitude more events. For example, an application that tracks clicks of the Place Order button on a web page has a certain number of events. Tracking mouse movements on the page could give tremendous insights into user behavior, but it would create many more events. Messaging middleware has evolved to handle greater event volumes.&lt;/p&gt; &lt;p&gt;Systems like &lt;a href="http://kafka.apache.org"&gt;Apache Kafka&lt;/a&gt; decentralize the processing of messages to the individual services that are using them. That makes the system horizontally scalable, reduces the amount of coordination between parts of the broker infrastructure, and allows clients to come and go without impacting the broker. This simpler architecture is great for the collection and distribution of huge numbers of events at cloud scale. (To go beyond the basics of Kafka, take a look at &lt;a href="http://strimzi.io"&gt;Strimzi&lt;/a&gt;, a project to bring Kafka into the world of OpenShift and Kubernetes.)&lt;/p&gt; &lt;p&gt;Next, Marius turned to enterprise integration, starting with the characteristics of an Enterprise Service Bus:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An ESB handles all the message traffic in the system, optimizing utilization but creating a bottleneck&lt;/li&gt; &lt;li&gt;An ESB is centralized and tightly coupled&lt;/li&gt; &lt;li&gt;An ESB mixes logic and infrastructure, including things like transformations and mediations with message delivery&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In newer messaging frameworks like &lt;a href="http://camel.apache.org"&gt;Apache Camel&lt;/a&gt;, the responsibility for things like transformations are placed on the applications or components that handle the messages. This makes it possible to change application logic without reconfiguring a centralized component like an ESB. With the rise of cloud-native applications, the technology has evolved further. Marius used a diagram of a set of containerized Camel applications running in OpenShift, with services such as messaging being provided by the platform. He also pointed to Strimzi (Kafka as a service) and mentioned &lt;a href="http://enmasse.io"&gt;EnMasse&lt;/a&gt; (messaging as a service), both of which run inside OpenShift.&lt;/p&gt; &lt;p&gt;&lt;a href="http://www.enterpriseintegrationpatterns.com"&gt;Enterprise Integration Patterns&lt;/a&gt; were originally designed to build integrated systems out of siloed enterprise systems. The patterns are a good fit for distributed, event-driven systems, typically implemented by event-driven microservices. With today&amp;#8217;s message volumes, however, &lt;em&gt;streaming&lt;/em&gt; becomes a key design point. Event-driven applications need to view streams as continuous, unbounded flows of data (events), with those streams handled by small services working together. Data pipelines built on top of small services working together using frameworks like Camel or &lt;a href="https://kafka.apache.org/documentation/streams/"&gt;Kafka Streams&lt;/a&gt; can solve modern enterprise integration problems. This change in mindset is an adaptation to the agile, decentralized, cloud-native nature of modern event-driven systems.&lt;/p&gt; &lt;p&gt;Which brings us to microservices themselves. A well-designed microservice has a specific business function and can be deployed and developed independently from other microservices. This enables agility and allows multiple development teams to work in parallel. Microservices are frequently containerized to increase density and utilization and reduce the overhead of running multiple services. Although the design concepts behind microservices have been around for years, the combination of cloud architectures and containerization has made them the obvious choice for many applications.&lt;/p&gt; &lt;p&gt;But not all. Christian made the important point that while microservices are great at enabling agility from existing systems, you shouldn&amp;#8217;t optimize your applications for microservices unless you have problems with your current architecture. Specifically, &lt;em&gt;if agility isn&amp;#8217;t the problem with your existing system, microservices are not the solution&lt;/em&gt;. As an example, he mentioned an HR system only used on the last day of each week. On that one day, utilization and compute requirements are high, but only on that day. It doesn&amp;#8217;t make sense to have a set of services around to serve that traffic constantly when you know that traffic isn&amp;#8217;t constant. The main message: &lt;em&gt;Understand your use cases.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Continuing the discussion of integration use cases, tasks like webhook callbacks, scheduled tasks, file processing, and reacting to database changes are better suited to the FaaS model. The code in a FaaS system is run by the platform whenever certain events happen. The task of the development team is to write the code that handles each event and the rules that define when the code should be invoked. As a result, the system has high utilization and parallelization, and the resources needed to handle those events are managed by the FaaS provider.&lt;/p&gt; &lt;p&gt;There are four options to consider as you build cloud-native applications:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Event-driven microservices&lt;/li&gt; &lt;li&gt;Containers&lt;/li&gt; &lt;li&gt;FaaS&lt;/li&gt; &lt;li&gt;Other serverless components such as databases, message queues, and caches&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Marius and Christian both made the point that all of these technologies have their place. Despite the current hype cycle, not everything is a good candidate for FaaS. Again, it comes down to your use case. If you have well-understood boundaries and you know what those boundaries are, microservices could be the answer. On the other hand, if you have an exploratory use case and you don&amp;#8217;t know its traffic patterns and utilization (and might not even know if the use case provides any business value at all), FaaS could let you experiment without a lot of overhead.&lt;/p&gt; &lt;p&gt;This was a great session with lots of insight from two highly experienced architects. If this post whetted your appetite, we encourage you to watch &lt;a href="https://youtu.be/jImAwSRehRs"&gt;the video recording of their presentation&lt;/a&gt;.&lt;/p&gt; &lt;div align="center"&gt;&lt;iframe src="https://www.youtube.com/embed/jImAwSRehRs" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start"&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; If System A and System B are client and server, composing a new application that adds System C is difficult because that almost certainly requires changes to Systems A and B. In the decoupled world of event-driven applications, introducing Systems C, D, and E shouldn&amp;#8217;t require any changes to Systems A and B. In fact, it&amp;#8217;s quite likely that A, B, C, D, and E have absolutely no knowledge of each other.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;linkname=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F18%2Feventful-tour-enterprise-integration-to-serverless%2F&amp;#38;title=Red%20Hat%20Summit%3A%20An%20Eventful%20Tour%20from%20Enterprise%20Integration%20to%20Serverless" data-a2a-url="https://developers.redhat.com/blog/2018/05/18/eventful-tour-enterprise-integration-to-serverless/" data-a2a-title="Red Hat Summit: An Eventful Tour from Enterprise Integration to Serverless"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/18/eventful-tour-enterprise-integration-to-serverless/"&gt;Red Hat Summit: An Eventful Tour from Enterprise Integration to Serverless&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3w-cg_s4g0k" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Senior Architects Marius Bogoevici and Christian Posta recently presented an overview of event-driven architecture, taking the audience from the basics of enterprise integration to microservices and serverless computing. Standing in front of a packed room at Red Hat Summit, their talk addressed four basic points: Event-driven architectures have been around for a while. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/18/eventful-tour-enterprise-integration-to-serverless/"&gt;Red Hat Summit: An Eventful Tour from Enterprise Integration to Serverless&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/05/18/eventful-tour-enterprise-integration-to-serverless/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">494797</post-id><dc:creator>Doug Tidwell</dc:creator><dc:date>2018-05-18T11:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/05/18/eventful-tour-enterprise-integration-to-serverless/</feedburner:origLink></entry><entry><title>This week in JBoss (17 May 2018)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JPFL0RvrFG4/this-week-in-jboss-17-may-2018" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="hibernate-orm" scheme="searchisko:content:tags" /><category term="hibernate-search" scheme="searchisko:content:tags" /><category term="hibernate-validator" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="teiiid" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><author><name>Jason Porter</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_17_may_2018</id><updated>2018-05-17T17:38:33Z</updated><published>2018-05-17T17:38:33Z</published><content type="html">&lt;!-- [DocumentBodyStart:8d9d9d0d-13ee-4d41-8a67-f062095e4a9a] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Sorry, we missed last week. We&amp;#8217;re pulling double duty this week to get you all caught up on the latest with JBoss!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;Red Hat Summit 2018&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;First, we would like to thank everyone who attended Red Hat Summit 2018 in San Francisco! This was a tremendous week full of amazing talks, keynotes, and fun! Middleware played a big role in many of the keynotes, which if you happened to miss are available on &lt;a class="jive-link-external-small" href="https://www.youtube.com/channel/UC9CjkhQp1jX8Hbtbg6OZ9dw" rel="nofollow"&gt;our YouTube channel&lt;/a&gt;. We hope you all enjoyed this year&amp;#8217;s Summit as much as we did!&lt;/p&gt;&lt;/div&gt;&lt;div class="sect2"&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;BPM at Summit&lt;/h3&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://kverlaen.blogspot.com/2018/05/red-hat-summit-in-san-francisco-2018.html" rel="nofollow"&gt;http://kverlaen.blogspot.com/2018/05/red-hat-summit-in-san-francisco-2018.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://kverlaen.blogspot.com/2018/05/bbva-is-red-hat-innovation-award-2018.html" rel="nofollow"&gt;http://kverlaen.blogspot.com/2018/05/bbva-is-red-hat-innovation-award-2018.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Jim Whitehurst mentioned Optaplanner to plan the agenda of Summit&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/05/09/hibernate-search-5-10-0-CR1/" rel="nofollow"&gt;Hibernate Search 5.10.0.CR1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/05/17/hibernate-search-5-10-0-Final/" rel="nofollow"&gt;Hibernate Search 5.10.0.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/05/11/hibernate-orm-5114-final-release/" rel="nofollow"&gt;Hibernate ORM 5.1.14.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/05/14/hibernate-orm-530-final-release/" rel="nofollow"&gt;Hibernate ORM 5.3.0.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/05/15/hibernate-validator-6010-final-out/" rel="nofollow"&gt;Hibernate Validator 6.0.10.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2018/05/infinispan-930beta1.html" rel="nofollow"&gt;Infinispan 9.3.0.Beta1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;The Hibernate team has been on fire, five releases within two weeks, amazing!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Eric Schabell Blogs&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Always the busy traveler and blogger, here are the latest entries by Eric:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.schabell.org/2018/05/ultimate-guide-to-red-hat-summit-2018-labs-hands-on-with-devops-modern-appdev-more.html" rel="nofollow"&gt;http://www.schabell.org/2018/05/ultimate-guide-to-red-hat-summit-2018-labs-hands-on-with-devops-modern-appdev-more.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.schabell.org/2018/05/redhat-summit-2018-3-pitfalls-video.html" rel="nofollow"&gt;http://www.schabell.org/2018/05/redhat-summit-2018-3-pitfalls-video.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.schabell.org/2018/05/redhat-summit-2018-3-pitfalls-hybrid-multicloud-slides.html" rel="nofollow"&gt;http://www.schabell.org/2018/05/redhat-summit-2018-3-pitfalls-hybrid-multicloud-slides.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.schabell.org/2018/05/shift-dev-2018-howto-jump-start-career-in-opensource.html" rel="nofollow"&gt;http://www.schabell.org/2018/05/shift-dev-2018-howto-jump-start-career-in-opensource.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Community musings&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/05/09/hibernate-community-newsletter-2018-09/" rel="nofollow"&gt;http://in.relation.to/2018/05/09/hibernate-community-newsletter-2018-09/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://kulbhushanchaskar.blogspot.in/2018/05/teiid-simplifies-data-virtualization.html" rel="nofollow"&gt;http://kulbhushanchaskar.blogspot.in/2018/05/teiid-simplifies-data-virtualization.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.youtube.com/watch?v=8HZlDGURzLc&amp;amp;authuser=0" rel="nofollow"&gt;Kiali, Observability for Service Mesh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Thank you once again for tuning in for another Weekly Editorial!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:8d9d9d0d-13ee-4d41-8a67-f062095e4a9a] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JPFL0RvrFG4" height="1" width="1" alt=""/&gt;</content><summary>Sorry, we missed last week. We’re pulling double duty this week to get you all caught up on the latest with JBoss!   Red Hat Summit 2018 First, we would like to thank everyone who attended Red Hat Summit 2018 in San Francisco! This was a tremendous week full of amazing talks, keynotes, and fun! Middleware played a big role in many of the keynotes, which if you happened to miss are available on our...</summary><dc:creator>Jason Porter</dc:creator><dc:date>2018-05-17T17:38:33Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2018/05/17/this-week-in-jboss-17-may-2018</feedburner:origLink></entry><entry><title>Scaling AMQ 7 Brokers with AMQ Interconnect</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ap8Lgk7SgJM/" /><category term="Integration" /><category term="JBoss A-MQ" /><category term="Performance" /><category term="AMQ Interconnect" /><category term="amqp" /><category term="message routing" /><category term="messaging" /><category term="Red Hat JBoss AMQ" /><category term="Red Hat JBoss AMQ Interconnect" /><author><name>Roman Martin Gil</name></author><id>https://developers.redhat.com/blog/?p=494117</id><updated>2018-05-17T16:45:37Z</updated><published>2018-05-17T16:45:37Z</published><content type="html">&lt;p&gt;Red Hat JBoss AMQ Interconnect provides flexible routing of messages between AMQP-enabled endpoints, including clients, brokers, and standalone services. With a single connection to a network of AMQ Interconnect routers, a client can exchange messages with any other endpoint connected to the network.&lt;/p&gt; &lt;p&gt;AMQ Interconnect can create various topologies to manage a high volume of traffic or define an elastic network in front of AMQ 7 brokers. This article shows a sample AMQ Interconnect topology for scaling AMQ 7 brokers easily.&lt;/p&gt; &lt;p&gt;&lt;span id="more-494117"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;AMQ Interconnect does not use master-slave clusters for high availability. It is typically deployed in topologies of multiple routers with redundant network paths, which it uses to provide reliable connectivity. AMQ Interconnect can distribute messaging workloads across the network and achieve new levels of scale with very low latency.&lt;/p&gt; &lt;p&gt;The router accepts AMQP protocol–based connections from clients and creates AMQP connections to brokers or AMQP services. The router classifies incoming AMQP messages and routes the messages between message producers and message consumers.&lt;/p&gt; &lt;p&gt;A messaging client can make a single AMQP connection into a messaging bus built with routers, and over that connection it can exchange messages with one or more message brokers connected to any router in the network. At the same time, the client can exchange messages directly with other endpoints without involving a broker at all.&lt;/p&gt; &lt;h2&gt;Topologies&lt;/h2&gt; &lt;p&gt;AMQ Interconnect will help create different topologies to manage a high volume of traffic or define an elastic network in front of AMQ 7 brokers. Some of these topologies could be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Connection aggregation&lt;/strong&gt;: Clients will manage a lot of connections; however, the routers will manage fewer connections to the brokers deployed in the back end. Routers will manage a huge amount of connections instead of the final broker instances.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Elastic network&lt;/strong&gt;: This topology will help us to modify the AMQ 7 broker instances topology without any impact to the clients. We could add or remove more brokers and the clients will manage the same connections.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In general, these topology use cases could provide the following features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Ability to handle large volume and high throughput&lt;/li&gt; &lt;li&gt;Ability to scale up the broker vertically through interconnect routers&lt;/li&gt; &lt;li&gt;Ability to automatically load balance traffic among shards of brokers&lt;/li&gt; &lt;li&gt;Freedom to add or remove shards without clients noticing&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Proposed Topology&lt;/h2&gt; &lt;p&gt;This article will describe a topology sample to show some of the AMQ Interconnect features. This diagram shows the proposed topology:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-494137 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology.png" alt="AMQ Interconnect topology" width="861" height="469" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology.png 861w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology-768x418.png 768w" sizes="(max-width: 861px) 100vw, 861px" /&gt;&lt;/p&gt; &lt;p&gt;The routers deployed will be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Aggregator router&lt;/strong&gt;: Router to manage any connection from or to AMQ 7 broker instances. This broker will aggregate any connection from the other routers to the AMQ 7 broker instances.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Producer router&lt;/strong&gt;: Router to manage connections from the &lt;em&gt;producer&lt;/em&gt; applications.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Consumer router&lt;/strong&gt;: Router to manage connections from the &lt;em&gt;consumer&lt;/em&gt; applications.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After finalizing the configuration, we can see from an AMQ 7 management web console the topology deployed:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-494147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology-deployed.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology-deployed.png" alt="AMQ Interconnect routers deployed" width="662" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology-deployed.png 662w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/amq-interconnect-amq-topology-deployed-300x108.png 300w" sizes="(max-width: 662px) 100vw, 662px" /&gt;&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To deploy and test this topology, you should have at least one AMQ 7 broker deployed and running on some host. If you have more instances, all of them should work in the same cluster definition.&lt;/p&gt; &lt;p&gt;Samples will work with a set of queues that you should define in your AMQ 7 brokers. To do that, please add to &lt;code&gt;address&lt;/code&gt; section of the  &lt;code&gt;$AMQ_BROKER/etc/broker.xml&lt;/code&gt; file the following definitions:&lt;/p&gt; &lt;pre&gt;&amp;#60;address name="SampleQueue"&amp;#62; &amp;#60;anycast&amp;#62; &amp;#60;queue name="SampleQueue" /&amp;#62; &amp;#60;/anycast&amp;#62; &amp;#60;/address&amp;#62;&lt;/pre&gt; &lt;p&gt;Also, we will need three hosts to deploy each kind of AMQ Interconnect router.&lt;/p&gt; &lt;h2&gt;Installation&lt;/h2&gt; &lt;p&gt;AMQ Interconnect is distributed as a set of RPM packages, which are available through your Red Hat subscription. Enable the following repositories:&lt;/p&gt; &lt;pre&gt;$ sudo subscription-manager repos --enable=amq-interconnect-1-for-rhel-7-server-rpms --enable=a-mq-clients-1-for-rhel-7-server-rpms &lt;/pre&gt; &lt;p&gt;Run this command to install the main packages:&lt;/p&gt; &lt;pre&gt;$ sudo yum install qpid-dispatch-router qpid-dispatch-tools&lt;/pre&gt; &lt;p&gt;Run the router as a service in Red Hat Enterprise Linux 7:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl start qdrouterd.service&lt;/pre&gt; &lt;p&gt;The AMQ Interconnect router configuration file is located at &lt;code&gt;/etc/qpid-dispatch/qdrouterd.conf&lt;/code&gt;. Any configuration will be defined in this file.&lt;/p&gt; &lt;p&gt;We will repeat these steps in each host used to deploy the AMQ Interconnect router.&lt;/p&gt; &lt;h2&gt;Aggregator Router&lt;/h2&gt; &lt;p&gt;This router will manage the incoming and outgoing messages from other routers to the AMQ 7 HA cluster topology behind it.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s the general router definition:&lt;/p&gt; &lt;pre&gt;router { mode: interior id: Router.Aggregator }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Listeners&lt;/strong&gt;: Three listeners will be defined to manage the different client connections:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;General listener for clients&lt;/li&gt; &lt;li&gt;Inter-router listener for other routers&lt;/li&gt; &lt;li&gt;General listener to attend connections from AMQ 7 management web console&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;# Listener for clients listener { host: 0.0.0.0 port: amqp authenticatePeer: no saslMechanisms: ANONYMOUS } # Listener for inter-router connections listener { host: 0.0.0.0 port: 5673 authenticatePeer: no role: inter-router } # Listener for AMQ console listener { name: amq-console role: normal host: 0.0.0.0 port: 5773 http: yes }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Connectors&lt;/strong&gt;: This section will define the connectors for each AMQ 7 broker defined in the back end.&lt;/p&gt; &lt;pre&gt;connector { name: amq7.master01 host: amq7master01host port: 5672 role: route-container saslMechanisms: ANONYMOUS } # Definitions for other AMQ 7 brokers ...&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Addresses&lt;/strong&gt;: This sample will define an address for &lt;code&gt;SampleQueue&lt;/code&gt; to the different brokers defined in the &lt;code&gt;connector&lt;/code&gt; section.&lt;/p&gt; &lt;pre&gt;address { prefix: SampleQueue # Routing messages through a broker queue waypoint: yes }&lt;/pre&gt; &lt;p&gt;A waypoint address identifies a queue on a broker to route messages.&lt;/p&gt; &lt;p&gt;Now we define the auto-links between the address and the different back ends. This case represents a sharded queue because there are multiple brokers. Using queue sharding, it is possible to distribute a single queue over multiple brokers.&lt;/p&gt; &lt;p&gt;Auto-links will connect the router to the broker. Auto-links will handle the client traffic on the router, not the broker. Clients attach their links to the router and then the router uses internal auto-links to connect to the queue on the broker. This means that the queue will always have a single producer and consumer regardless of how many clients are attached to the router.&lt;/p&gt; &lt;p&gt;These blocks will define the links to send messages to the brokers from the router:&lt;/p&gt; &lt;pre&gt;autoLink { addr: SampleQueue connection: amq7.master01 dir: out } # Definitions for other AMQ 7 brokers ...&lt;/pre&gt; &lt;p&gt;These blocks will define the links to receive messages from the brokers into the router:&lt;/p&gt; &lt;pre&gt;autoLink { addr: SampleQueue connection: amq7.master01 dir: in } # Definitions for other AMQ 7 brokers ...&lt;/pre&gt; &lt;h2&gt;Producer Router&lt;/h2&gt; &lt;p&gt;This router will manage the incoming messages from producers to the aggregator router.&lt;/p&gt; &lt;p&gt;Here is the general router definition:&lt;/p&gt; &lt;pre&gt;router { mode: interior id: Router.Producer }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Listeners&lt;/strong&gt;: Two listeners will be defined to manage the different client connections:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;General listener for clients&lt;/li&gt; &lt;li&gt;Inter-router listener for other routers&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;# Listener for clients listener { host: 0.0.0.0 port: amqp authenticatePeer: no saslMechanisms: ANONYMOUS } # Listener for inter-router connections listener { host: 0.0.0.0 port: 5673 authenticatePeer: no role: inter-router }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Connectors&lt;/strong&gt;: This section will define the connectors to the aggregator router. Note that we will connect to the inter-router port, not to the AMQP service port.&lt;/p&gt; &lt;pre&gt;connector { name: Router.Aggregator host: amqinterconnectaggregatorhost port: 5673 role: inter-router }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Addresses&lt;/strong&gt;: This sample will define an address for &lt;code&gt;SampleQueue&lt;/code&gt; to distribute the messages between the different routers in the network.&lt;/p&gt; &lt;pre&gt;address { prefix: SampleQueue distribution: closest }&lt;/pre&gt; &lt;p&gt;This address defines a route pattern based on the closest method, which determines the shortest path based on the topology cost to reach each of the consumers.&lt;/p&gt; &lt;h2&gt;Consumer Router&lt;/h2&gt; &lt;p&gt;This router will manage the outgoing messages from the aggregator router to the consumer router.&lt;/p&gt; &lt;p&gt;Here is the general router definition:&lt;/p&gt; &lt;pre&gt;router { mode: interior id: Router.Consumer }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Listeners&lt;/strong&gt;: Two listeners will be defined to manage the different client connections:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;General listener for clients&lt;/li&gt; &lt;li&gt;Inter-router listener for other routers&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;# Listener for clients listener { host: 0.0.0.0 port: amqp authenticatePeer: no saslMechanisms: ANONYMOUS } # Listener for inter-router connections listener { host: 0.0.0.0 port: 5673 authenticatePeer: no role: inter-router }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Connectors&lt;/strong&gt;: This section will define the connectors to the aggregator router. Note that we will connect to the inter-router port, not to the AMQP service port.&lt;/p&gt; &lt;pre&gt;connector { name: Router.Aggregator host: amqinterconnectaggregatorhost port: 5673 role: inter-router }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Addresses&lt;/strong&gt;: This sample will define an address for &lt;code&gt;SampleQueue&lt;/code&gt; to distribute the messages between the different routers in the network.&lt;/p&gt; &lt;pre&gt;address { prefix: SampleQueue waypoint: yes }&lt;/pre&gt; &lt;h2&gt;Testing&lt;/h2&gt; &lt;p&gt;The following &lt;a href="https://github.com/rmarting/scale-amq-with-interconnect"&gt;GitHub repository&lt;/a&gt; includes a set of main Java applications using &lt;a href="https://qpid.apache.org/components/jms/index.html"&gt;Apache Qpid JMS&lt;/a&gt; dependencies to send and receive messages using the AMQP protocol. After building and packaging the applications, you can execute the samples and test how the messages are routed from the AMQ Interconnect routers to and from the AMQ 7 brokers.&lt;/p&gt; &lt;p&gt;The sender application from the publish/subscribe sample will send 10 messages to the producer router, which will route the messages to the aggregator route, and the messages will be stored at the AMQ 7 broker.&lt;/p&gt; &lt;p&gt;The sender application will output the following:&lt;/p&gt; &lt;pre&gt;$ java -DUSER=application -DPASSWORD=application -cp "target/classes/:target/dependency/*" org.apache.qpid.jms.example.pubsub.Sender Sending up to 10 messages. Specify a message count as the program argument if you wish to send a different amount. Sender connected to amqp://producerrouterhost:5672 Sent message 10 Sent 10 messages in 314ms&lt;/pre&gt; &lt;p&gt;The receiver application from the same sample will consume 10 messages from the consumer router. The aggregator router will get the messages from the AMQ 7 broker, and it will route them to the consumer router.&lt;/p&gt; &lt;p&gt;The receiver application will output this:&lt;/p&gt; &lt;pre&gt;$ java -DUSER=application -DPASSWORD=application -cp "target/classes/:target/dependency/rg.apache.qpid.jms.example.pubsub.Receiver Consuming up to 10 messages. Specify a message count as the program argument if you wish to consume a different amount. Receiver connected to amqp://consumerroutehost:5672 Got message 1. Body: Text message. Got message 2. Body: Text message. Got message 3. Body: Text message. Got message 4. Body: Text message. Got message 5. Body: Text message. Got message 6. Body: Text message. Got message 7. Body: Text message. Got message 8. Body: Text message. Got message 9. Body: Text message. Got message 10. Body: Text message. Received 10 messages in 339ms&lt;/pre&gt; &lt;p&gt;During the execution of these applications, you will see the following in the AMQ 7 management console:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-494177 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/05/publish-subscribe-sample.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/publish-subscribe-sample.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/publish-subscribe-sample.png 731w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/publish-subscribe-sample-300x115.png 300w" sizes="(max-width: 731px) 100vw, 731px" /&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article shows you a sample AMQ Interconnect topology for scaling your AMQ 7 brokers easily, but it is not the only topology. AMQ Interconnect allows you to design and deploy other router topologies to scale up your AMQ 7 brokers. These topologies could cover other use cases such as:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Complex internal infrastructures: AMQ Interconnect routers to forward messages to assigned brokers&lt;/li&gt; &lt;li&gt;Secured brokers, firewall restrictions: AMQ Interconnect routers as a reverse proxy in a DMZ&lt;/li&gt; &lt;li&gt;Instance data feed, information integration: AMQ Interconnect routers send messages directly to a receiving application service&lt;/li&gt; &lt;li&gt;Distributed data centers, cross-timezone branches: AMQ Interconnect routers to communicate with brokers and applications across the World Wide Web&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;With all this flexibility, your use case can easily be accommodated by using the messaging routing capabilities from the AMQ Interconnect router.&lt;/p&gt; &lt;p&gt;The following links provide more details about this router:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_amq_interconnect/index"&gt;Using AMQ Interconnect&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://qpid.apache.org/components/dispatch-router/index.html"&gt;Apache Qpid Dispatch Router&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;linkname=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F05%2F17%2Fscaling-amq-7-brokers-with-amq-interconnect%2F&amp;#38;title=Scaling%20AMQ%207%20Brokers%20with%20AMQ%20Interconnect" data-a2a-url="https://developers.redhat.com/blog/2018/05/17/scaling-amq-7-brokers-with-amq-interconnect/" data-a2a-title="Scaling AMQ 7 Brokers with AMQ Interconnect"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/17/scaling-amq-7-brokers-with-amq-interconnect/"&gt;Scaling AMQ 7 Brokers with AMQ Interconnect&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ap8Lgk7SgJM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat JBoss AMQ Interconnect provides flexible routing of messages between AMQP-enabled endpoints, including clients, brokers, and standalone services. With a single connection to a network of AMQ Interconnect routers, a client can exchange messages with any other endpoint connected to the network. AMQ Interconnect can create various topologies to manage a high volume of [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/05/17/scaling-amq-7-brokers-with-amq-interconnect/"&gt;Scaling AMQ 7 Brokers with AMQ Interconnect&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/05/17/scaling-amq-7-brokers-with-amq-interconnect/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">494117</post-id><dc:creator>Roman Martin Gil</dc:creator><dc:date>2018-05-17T16:45:37Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/05/17/scaling-amq-7-brokers-with-amq-interconnect/</feedburner:origLink></entry><entry><title>Shift Developer Conference 2018 - How to Jump Start a Career in Open Source</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6_vXYooxvjI/shift-dev-2018-howto-jump-start-career-in-opensource.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-shift_developer_conference_2018_how_to_jump_start_a_career_in_open_source</id><updated>2018-05-17T05:00:07Z</updated><published>2018-05-17T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://shiftconf.co/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="shift developer" border="0" data-original-height="294" data-original-width="902" height="102" src="https://4.bp.blogspot.com/-c4PoVbyaaww/WnhUB7Fr70I/AAAAAAAArtA/jh_GZwG8a-Mo4xmP6d1tR3vlbJ9Bun8BwCLcBGAs/s320/shift-conf.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;A conference in a resort town of Split, Croatia was something I had to see, as you know I have a lot of content to share so &lt;a href="http://bit.ly/shift-dev-conf-2018-diving-deep" target="_blank"&gt;I dove in deep &lt;/a&gt;on open, application development, cloud and containers with the call for papers.&lt;br /&gt;&lt;br /&gt;The acceptances came in and I've been asked to provide a session on the softer skills area of developer and development career advice.&lt;br /&gt;&lt;br /&gt;My career in open source has been a long one and I think I've got a few good tips, tricks and pieces of advice based on what's worked on this long and wonderful journey.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;It's a bit of an adventure to get out to the town of Split, Croatia, but on June 1, I'll present the following talk:&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;How To Jump Start a Career in Open Source&lt;/h3&gt;&lt;i&gt;It's not magic. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source. Join me for an hour of power where you'll be given a clear and easy to use plan for jump starting your open source career immediately.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Time: 12:30 - 13:00&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Red Hat should be present as a sponsor, so hope to see you at Shift DEV 2018 and enjoy a chat about anything related to open source, cloud and application delivery!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=joKkgSp4xbA:OExt0lWovqk:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=joKkgSp4xbA:OExt0lWovqk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=joKkgSp4xbA:OExt0lWovqk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=joKkgSp4xbA:OExt0lWovqk:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=joKkgSp4xbA:OExt0lWovqk:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/joKkgSp4xbA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6_vXYooxvjI" height="1" width="1" alt=""/&gt;</content><summary>A conference in a resort town of Split, Croatia was something I had to see, as you know I have a lot of content to share so I dove in deep on open, application development, cloud and containers with the call for papers. The acceptances came in and I've been asked to provide a session on the softer skills area of developer and development career advice. My career in open source has been a long one ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-05-17T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/joKkgSp4xbA/shift-dev-2018-howto-jump-start-career-in-opensource.html</feedburner:origLink></entry><entry><title>Hibernate Search 5.10.0.Final is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/akYTyOsYbys/" /><category term="elasticsearch" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="hibernate search" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>unknown</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_search_5_10_0_final_is_out</id><updated>2018-05-17T07:11:49Z</updated><published>2018-05-17T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just published 5.10.0.Final, the first stable release in the 5.10 branch. This release brings an upgrade of the ORM integration to ORM 5.3 and JPA 2.2, an integration to DI frameworks through Hibernate ORM 5.3, an upgrade to WildFly 12 and JGroups 4, and JPMS automatic module names.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you didn’t pay attention after the 5.9.0.Final release, then there is a lot of news for you! Below is a summary of notable changes since 5.9.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you tried out the Betas/CR, know that this release only adds two changes on top of 5.10.0.CR1:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3159"&gt;HSEARCH-3159&lt;/a&gt;: Hibernate Search’s ORM integration now depends on Hibernate ORM 5.3.0.Final.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3156"&gt;HSEARCH-3156&lt;/a&gt;: &lt;code&gt;@ContainedIn&lt;/code&gt; will not fail anymore at runtime when targeting a class for which only some subclasses are configured in Search.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="orm53"&gt;&lt;a class="anchor" href="#orm53"&gt;&lt;/a&gt;ORM 5.3 and JPA 2.2 compatibility&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hibernate Search 5.10 is designed to work with Hibernate ORM 5.3.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="dependency-injection"&gt;&lt;a class="anchor" href="#dependency-injection"&gt;&lt;/a&gt;Integration to DI frameworks through Hibernate ORM 5.3&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hibernate Search now taps into Hibernate ORM’s integration to dependency injection frameworks. If you use a dependency injection framework integrating with Hibernate ORM 5.3, and you add field bridges to your dependency injection context, then Hibernate Search will automatically retrieve and use field bridges from this context.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This allows you in particular to inject components from your DI context into your field bridges, using your DI framework’s features (&lt;code&gt;@java.inject.Inject&lt;/code&gt;, Spring’s &lt;code&gt;@Autowired&lt;/code&gt;, …​).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The integration is already known to work in a CDI 2.0 environment such as WildFly 12, and the Spring team will probably make it work as soon as it adds support for JPA 2.2.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="wildfly-12"&gt;&lt;a class="anchor" href="#wildfly-12"&gt;&lt;/a&gt;Upgrade to WildFly 12 and JGroups 4&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hibernate Search’s JBoss modules now target WildFly 12. This means in particular that the JGroups backend now uses JGroups 4 and is no longer compatible with JGroups 3.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Also, we took this opportunity to move the JGroups backend’s JBoss modules out of the engine feature pack to &lt;a href="https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#_jgroups_feature_pack"&gt;a dedicated feature pack&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="jpms-automatic-module-names"&gt;&lt;a class="anchor" href="#jpms-automatic-module-names"&gt;&lt;/a&gt;JPMS automatic module names&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We added automatic &lt;a href="https://en.wikipedia.org/wiki/Java_Platform_Module_System"&gt;JPMS module&lt;/a&gt; names to our JARs.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that Hibernate Search JARs still can only be used as automatic modules, because some of our dependencies cannot easily be used as modules yet.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Here are the module names:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.engine&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.orm&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.backend.elasticsearch&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.backend.elasticsearch.aws&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.clustering.jms&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.clustering.jgroups&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.jsr352.core&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.jsr352.jberet&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;org.hibernate.search.serialization.avro&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="elasticsearch-client-access"&gt;&lt;a class="anchor" href="#elasticsearch-client-access"&gt;&lt;/a&gt;Direct access to the Elasticsearch client&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hibernate Search now offers a way to access the Elasticsearch client directly. See the &lt;a href="https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#elasticsearch-client-access"&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="other-changes"&gt;&lt;a class="anchor" href="#other-changes"&gt;&lt;/a&gt;Other changes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Here are the other notable changes since Hibernate Search 5.9.0.Final:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3026"&gt;HSEARCH-3026&lt;/a&gt;: If your Elasticsearch cluster is accessed through a URL with a non-root path, you can now use &lt;code&gt;hibernate.search.default.elasticsearch.path_prefix&lt;/code&gt; to tell Hibernate Search about that path.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3039"&gt;HSEARCH-3039&lt;/a&gt;: We removed the ability to analyze document identifiers from Search a few versions ago, but some parts of Hibernate Search still performed analysis on document identifiers in some cases, in particular when querying them and when embedding a document ID using &lt;code&gt;@IndexedEmbedded&lt;/code&gt;. This has been fixed: Hibernate Search now consistently skips analysis on document identifiers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3021"&gt;HSEARCH-3021&lt;/a&gt;: The integration to dependency injection frameworks is now &lt;a href="https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#section-bridge-dependency-injection"&gt;properly documented&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3138"&gt;HSEARCH-3138&lt;/a&gt;: We restored binary compatibility with applications built against Hibernate Search 5.5, so that Hibernate Search 5.10 can be included in the upcoming WildFly release.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For a full list of changes since 5.9.0.Final, please see &lt;a href="https://hibernate.atlassian.net/issues/?jql=project%20%3D%20HSEARCH%20AND%20fixVersion%20in%20(5.10.0.Final%2C%205.10.0.CR1%2C%205.10.0.Beta2%2C%205.10.0.Beta1)%20ORDER%20BY%20updated"&gt;this list of tickets on our JIRA instance&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For a full list of changes since 5.10.0.CR1, please see &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10061&amp;amp;version=31668"&gt;the release notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="how-to-get-this-release"&gt;&lt;a class="anchor" href="#how-to-get-this-release"&gt;&lt;/a&gt;How to get this release&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/search/releases/5.10/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="next"&gt;&lt;a class="anchor" href="#next"&gt;&lt;/a&gt;Next&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We are still working on Hibernate Search 6, with the &lt;a href="https://github.com/hibernate/hibernate-search-6-poc"&gt;proof of concept&lt;/a&gt; now providing both an Elasticsearch and a Lucene backend, with generic APIs that will avoid the need to add Lucene to your classpath when you only need Elasticsearch.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There is still &lt;a href="https://hibernate.atlassian.net/issues/?jql=project%20%3D%20HSEARCH%20AND%20fixVersion%20IN%20(6-before-POC-merge%2C%206-after-POC-merge%2C%206)%20order%20by%20status%20DESC"&gt;a lot of work to do&lt;/a&gt;, but we expect to be able to release an Alpha in the next few months.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the following channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-search"&gt;hibernate-search tag on Stackoverflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-search"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/akYTyOsYbys" height="1" width="1" alt=""/&gt;</content><summary>We just published 5.10.0.Final, the first stable release in the 5.10 branch. This release brings an upgrade of the ORM integration to ORM 5.3 and JPA 2.2, an integration to DI frameworks through Hibernate ORM 5.3, an upgrade to WildFly 12 and JGroups 4, and JPMS automatic module names. What’s new? If you didn’t pay attention after the 5.9.0.Final release, then there is a lot of news for you! Below...</summary><dc:creator>unknown</dc:creator><dc:date>2018-05-17T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/05/17/hibernate-search-5-10-0-Final/</feedburner:origLink></entry></feed>
